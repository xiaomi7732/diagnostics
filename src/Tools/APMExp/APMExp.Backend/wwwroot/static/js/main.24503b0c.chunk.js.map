{"version":3,"sources":["Models/CounterScores.ts","Models/ColorPalette.ts","Components/Processes.tsx","Components/TraceSessions.tsx","Components/TraceRepo.tsx","Components/ConnectingToBackend.tsx","Components/AppHeader.tsx","Components/ConnectionStatus.tsx","Components/MonitorViz.tsx","Components/ProfilePickerPanel.tsx","Components/MonitorPage.tsx","Components/ProfileManager.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CounterScores","ColorPalette","Processes","handleRefresh","event","a","preventDefault","stopPropagation","props","refreshProcessAsync","content","len","undefined","this","processArray","length","dumpButtonClassName","isDumping","map","process","index","className","key","id","name","mainModule","type","value","onClick","startMonitoringAsync","disabled","takeDumpAsync","Component","TraceSessions","list","traceSessions","session","processId","sessionId","stopProfilingAsync","stopMonitoringAsync","setAsSelected","defaultValue","loadTraceSessionsAsync","PureComponent","TraceRepo","fileArray","sort","b","fileName","file","fileFormat","toLowerCase","endsWith","fileSize","filesize","sizeInBytes","round","href","baseUrl","convertToSpeedscopeAsync","loadTraceFilesAsync","target","rel","ConnectingToBackend","handleConnectAsync","url","setState","errorMessage","isConnecting","connectToBackendAsync","handleAddBackend","e","newValue","newBackend","addBackend","newUrl","handleNewUrlChanged","state","backendUrlArray","removeBackend","onSubmit","htmlFor","placeholder","onChange","AppHeader","isHome","goHome","ConnectionStatus","disconnectBackend","MonitorViz","updateWindowDimensions","width","window","innerWidth","metricsNameComparer","name1","name2","getScore","fallBack","score","counterScore","startsWith","console","warn","addEventListener","removeEventListener","report","size","chartWidth","chartHeight","Array","from","keys","metricName","idxKey","reportItem","get","data","x","color","Object","style","display","flexFlow","height","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","stroke","dataKey","strokeDasharray","vertical","strokeWidth","wrapperStyle","backgroundColor","isAnimationActive","fillOpacity","fill","React","ProfilePickerPanel","selectedProfile","profileArray","selectProfile","manageProfiles","isOpen","setIsOpen","labelId","useId","labelProperties","openPanel","useConstCallback","dismissPanel","onManageProfiles","validProfileArray","filter","p","activeProfileDetails","find","onRenderFooterContent","PrimaryButton","DefaultButton","alignItems","marginLeft","text","Panel","PanelType","medium","headerText","isLightDismiss","onDismiss","isFooterAtBottom","closeButtonAriaLabel","description","ChoiceGroup","defaultSelectedKey","options","item","ev","option","newProfile","ariaLabelledBy","MonitorPage","onUpdate","metricValue","newReport","reportCache","has","array","maxDataPointCount","shift","push","set","lastUpdate","Date","now","getTime","debug","forEach","v","k","Map","connection","signalR","withUrl","selectedEndpoint","withAutomaticReconnect","build","on","start","catch","err","alert","counterHub","stop","exitMonitor","traceSessionArray","startProfilingAsync","manageProfile","profilingSession","ProfileManager","_newProfileInputId","getId","_newProfileDescriptionId","_newProviderNameId","_newProviderKeywordId","_newProviderEventLevelId","_newProviderFilterId","handleNewProfileName","newProfileName","handleNewProfileDescription","newProfileDescription","handleNewProfileSubmit","addProfileAsync","providers","isShowNewProfileModel","refreshProfile","handleDeleteProfileSubmit","deleteProfileAsync","isConfirmDeletingProfile","setManageProfile","handleAddProvider","newProvider","keywordsHex","appendProvider","eventLevel","filterData","isShowAddProvider","handleChangeForNewProvider","propertyName","newState","pickFirstProfile","profileDetails","exportProfiles","effectiveProfileArray","profileList","p1","p2","profile","title","checked","log","selected","Modal","isBlocking","role","isDarkOverlay","provider","handleRemoveProvider","readOnly","JSON","stringify","FileSaver","removeProvider","App","BackendListKey","initializeAsync","Promise","all","loadProcessesAsync","loadProfilesAsync","isReady","getProcessesAsync","processes","fetch","response","ok","json","results","method","headers","body","result","getTraceSessionsAsync","setSelectedSession","selectedSession","isShowMonitor","getReportAsync","setShowMonitoring","getTraceFilesAsync","files","traceFileArray","error","getList","includes","localStorage","setItem","isBackendReady","trim","substring","isManageProfile","selectedProfileForManage","getProfilesAsync","addNewProfileAsync","updateProfileAsync","encodeURI","isMini","dumpType","bind","urlListSerialized","getItem","parse","selectedProvider","assign","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24503b0c.chunk.js","sourcesContent":["export enum CounterScores {\r\n    // CPU\r\n    'CPU Usage',\r\n    'Number of Active Timers',\r\n    'Exception Count',\r\n    'ThreadPool Thread Count',\r\n    'ThreadPool Queue Length',\r\n    'ThreadPool Completed Work Item Count',\r\n\r\n    // Memory\r\n    'Working Set',\r\n    'Allocation Rate',\r\n    'Number of Assemblies Loaded',\r\n\r\n    'GC Heap Size',\r\n    '% Time in GC since last GC',\r\n    'Gen 0 Size',\r\n    'Gen 0 GC Count',\r\n    'Gen 1 Size',\r\n    'Gen 1 GC Count',\r\n    'LOH Size',\r\n    'Gen 2 Size',\r\n    'Gen 2 GC Count',\r\n\r\n    // Requests\r\n    'Current Requests',\r\n    'Failed Requests',\r\n    'Total Requests',\r\n    'Request Rate',\r\n    'Monitor Lock Contention Count',\r\n}","export enum ColorPalette {\r\n    '#005697',\r\n    '#456990',\r\n    '#3F5E5A',\r\n    '#C52184',\r\n    '#5FAD41',\r\n    '#54F2F2',\r\n}","import React, { Component, ReactNode } from 'react';\r\nimport Process from '../Models/Process';\r\nimport './Processes.css';\r\n\r\ninterface ProcessesProps {\r\n    refreshProcessAsync: () => Promise<void>;\r\n    startProfilingAsync: (processId: number) => Promise<boolean>;\r\n    startMonitoringAsync: (processId: number) => Promise<boolean>;\r\n    takeDumpAsync: (processId: number, isMini: boolean) => Promise<boolean>;\r\n    isDumping: boolean;\r\n    processArray: Process[] | undefined;\r\n}\r\n\r\nexport default class Processes extends Component<ProcessesProps, {}>{\r\n    render(): ReactNode {\r\n        let content;\r\n        let len = 0;\r\n\r\n        if (this.props.processArray === undefined || this.props.processArray.length === 0) {\r\n            content = (<div>\r\n                There is no .NET Core processes.\r\n            </div>);\r\n        } else {\r\n            len = this.props.processArray.length;\r\n            const dumpButtonClassName: string = 'button' + (this.props.isDumping ? ' disabled' : '');\r\n            content = this.props.processArray.map((process: Process, index: number) => {\r\n                return (\r\n                    <div className='process-line' key={index}>\r\n                        <span className='process-id'>{process.id}</span>\r\n                        <div className='process-info'>\r\n                            <div className='process-name'>{process.name}</div>\r\n                            <div className='process-path'>{process.mainModule}</div>\r\n                        </div>\r\n                        <input className='button' type='button' value='&#x25B6; Monitor'\r\n                            onClick={() => {\r\n                                this.props.startMonitoringAsync(process.id);\r\n                            }} />\r\n\r\n                        <input className={dumpButtonClassName} type='button' value='&#128248; Mini Dump' disabled={this.props.isDumping}\r\n                            onClick={async () => {\r\n                                await this.props.takeDumpAsync(process.id, true)\r\n                            }} />\r\n                        <input className={dumpButtonClassName} type='button' value='&#128248; Heap Dump' disabled={this.props.isDumping}\r\n                            onClick={async () => {\r\n                                await this.props.takeDumpAsync(process.id, false)\r\n                            }} />\r\n                    </div>)\r\n            });\r\n        }\r\n\r\n        return (<div className='processes'>\r\n            <div className='header'>\r\n                <h2>Remote Process ({len})</h2>\r\n                <input className='button header-button refresh-button' type='button' onClick={this.handleRefresh} value='&#x1f5d8;'></input>\r\n            </div>\r\n            <div>\r\n                To begin monitoring, pick up a process and press the Monitor button.\r\n            </div>\r\n            {this.props.isDumping ? <div>Dump in progress . . .</div> : null}\r\n            {content}\r\n        </div>\r\n        );\r\n    }\r\n\r\n    private handleRefresh = async (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.props.refreshProcessAsync();\r\n    }\r\n}\r\n\r\n\r\n","import React, { PureComponent } from 'react';\r\nimport { TraceSession } from '../Models/TraceSession';\r\nimport './TraceSessions.css';\r\n\r\ninterface TraceSessionsProps {\r\n    setAsSelected: (session: TraceSession) => void;\r\n    loadTraceSessionsAsync: () => Promise<void>;\r\n    stopProfilingAsync: (processId: number, sessionId: number) => Promise<boolean>;\r\n    stopMonitoringAsync: (processId: number, sessionId: number) => Promise<boolean>;\r\n    traceSessions: TraceSession[] | undefined;\r\n}\r\n\r\nexport default class TraceSessions extends PureComponent<TraceSessionsProps, {}>{\r\n    render() {\r\n        let list;\r\n        let len: number = 0;\r\n\r\n        if (this.props.traceSessions === undefined || this.props.traceSessions.length === 0) {\r\n            list = <div>There's no trace sessions.</div>\r\n        }\r\n        else {\r\n            len = this.props.traceSessions.length;\r\n            list = <div className='session-container'>\r\n                {this.props.traceSessions.map((session, index) => {\r\n                    return (<div className='session-line' key={index}>\r\n                        <div className='process-id-part'>\r\n                            <span className='bold-text'>ProcessId:&nbsp;</span>\r\n                            <span>{session.processId}</span>\r\n                        </div>\r\n                        <div className='session-id-part'>\r\n                            <span className='bold-text'>SessionId:&nbsp;</span>\r\n                            <span>{session.sessionId}</span>\r\n                        </div>\r\n                        {session.type === 0 && <input className='button' type='button' value='&#x25A0; Stop Profiling' onClick={() => {\r\n                            this.props.stopProfilingAsync(session.processId, session.sessionId);\r\n                        }} />}\r\n                        {session.type === 1 && <input className='button' type='button' value='&#x25A0; Stop Monitoring' onClick={() => {\r\n                            this.props.stopMonitoringAsync(session.processId, session.sessionId);\r\n                        }} />}\r\n                        {session.type === 1 && <input className='button' type='button' value='&#x1F5E0; Visualize' onClick={() => {\r\n                            this.props.setAsSelected(session);\r\n                        }} />}\r\n                    </div>);\r\n                })}\r\n            </div>\r\n        }\r\n        return (<div className='trace-session'>\r\n            <div className='header'>\r\n                <h2>Remote Trace Sessions ({len})</h2>\r\n                <input className='button header-button' type='button' defaultValue='&#x1f5d8;' onClick={this.props.loadTraceSessionsAsync} />\r\n            </div>\r\n            {list}\r\n        </div>);\r\n    }\r\n}","import React, { PureComponent } from 'react';\r\nimport TraceFile from '../Models/TraceFile';\r\nimport * as filesize from 'filesize';\r\nimport './TraceRepo.css';\r\n\r\ninterface TraceRepoProps {\r\n    baseUrl: string;\r\n    loadTraceFilesAsync: () => Promise<void>;\r\n    convertToSpeedscopeAsync: (fileName: string) => Promise<boolean>;\r\n    fileArray: TraceFile[] | undefined;\r\n}\r\n\r\nexport default class TraceRepo extends PureComponent<TraceRepoProps, {}>{\r\n    render() {\r\n        let content;\r\n        let len: number = 0;\r\n        if (this.props.fileArray === undefined || this.props.fileArray.length === 0) {\r\n            content = <div>There's no trace file.</div>\r\n        } else {\r\n            len = this.props.fileArray.length;\r\n            content = <div>\r\n                {this.props.fileArray.sort((a, b) => {\r\n                    return a.fileName > b.fileName ? -1 : 1;\r\n                }).map((file, index) => {\r\n                    const fileFormat = file.fileName.toLowerCase().endsWith('.nettrace') ? 'nettrace' : 'speedscope';\r\n                    const fileSize = filesize.default(file.sizeInBytes, { round: 0 });\r\n                    return <div key={index} className='trace-file-line'>\r\n                        <div className='trace-file'>\r\n                            <a href={`${this.props.baseUrl}/TraceFiles/${file.fileName}`}>{file.fileName}</a>\r\n                        </div>\r\n                        <div className='trace-file-size'>\r\n                            {fileSize}\r\n                        </div>\r\n                        {(fileFormat === 'nettrace') && <input className='button' type='button' value='Get speedscope file' onClick={() => this.props.convertToSpeedscopeAsync(file.fileName)}></input>}\r\n                        {/* <input className='button' type='button' value='Upload to SP Backend' onClick={() => alert(`Not implemented: ${file.fileName}`)} /> */}\r\n                    </div>\r\n                })}\r\n            </div>\r\n        }\r\n        return (<div className='trace-repo'>\r\n            <div className='header'>\r\n                <h2>Remote Trace Files ({len})</h2>\r\n                <input className='button header-button' type='button' value='&#x1f5d8;' onClick={async () => await this.props.loadTraceFilesAsync()}></input>\r\n            </div>\r\n            <div className='speed-scope-tips'>\r\n                To open trace in <a href='https://speedscope.app' target='_blank' rel='noopener noreferrer'>speedscope</a>, download the <span>speedscope.json</span> files to your local box and upload it to <a href='https://speedscope.app' target='_blank' rel='noopener noreferrer'>speedscope.app</a>.\r\n            </div>\r\n            {content}\r\n        </div>)\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './ConnectingToBackend.css';\r\n\r\ninterface ConnectingToBackendProps {\r\n    backendUrlArray: string[] | undefined,\r\n    connectToBackendAsync: (url: string) => Promise<boolean>;\r\n    addBackend: (newUrl: string) => void;\r\n    removeBackend: (targetUrl: string) => void;\r\n}\r\n\r\ninterface ConnectingToBackendState {\r\n    errorMessage: string | undefined;\r\n    isConnecting: boolean;\r\n    newUrl: string;\r\n}\r\n\r\nexport default class ConnectingToBackend extends Component<ConnectingToBackendProps, ConnectingToBackendState>{\r\n    constructor(props: ConnectingToBackendProps) {\r\n        super(props);\r\n        this.state = {\r\n            errorMessage: undefined,\r\n            isConnecting: false,\r\n            newUrl: '',\r\n        };\r\n    }\r\n\r\n    render() {\r\n        let content;\r\n        if (this.props.backendUrlArray === undefined || this.props.backendUrlArray.length === 0) {\r\n            content = <div>Please add backend.</div>\r\n        } else {\r\n            content = this.props.backendUrlArray.map((url, index) => {\r\n                return <div className='backend-item-container' key={index}>\r\n                    <span className='backend-url' onClick={async () => {\r\n                        await this.handleConnectAsync(url);\r\n                    }}>{url}</span>\r\n                    <input className='button' type='button' value='Connect' onClick={async () => {\r\n                        await this.handleConnectAsync(url);\r\n                    }}></input>\r\n                    <input className='button' type='button' value='Remove' onClick={async () => {\r\n                        this.props.removeBackend(url);\r\n                    }}></input>\r\n                </div>\r\n            })\r\n        }\r\n\r\n        return (\r\n            <div className='connect-backend'>\r\n                <h2>Pick a backend</h2>\r\n                {content}\r\n                {!!this.state.isConnecting && <div>Connecting . . .</div>}\r\n                {!!this.state.errorMessage && <div>{this.state.errorMessage}</div>}\r\n\r\n                <h2>Adding new Backend</h2>\r\n                <div className='new-endpoint-container'>\r\n                    <form onSubmit={this.handleAddBackend}>\r\n                        <label htmlFor='newBackend'>Type in a new endpoint:</label>\r\n                        <input className='text-input' id='newBackend' type='textbox' placeholder='http://localhost:9400'\r\n                            value={this.state.newUrl} onChange={this.handleNewUrlChanged} />\r\n                        <div>\r\n                            <span className='tips'>Tips: Press enter to add the endpoint.</span>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleConnectAsync = async (url: string) => {\r\n        this.setState({\r\n            errorMessage: '',\r\n            isConnecting: true,\r\n        });\r\n        const result = await this.props.connectToBackendAsync(url);\r\n        if (!result) {\r\n            this.setState({\r\n                errorMessage: `Failed to connecting to backend: ${url}.`,\r\n                isConnecting: false,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleAddBackend = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        const target = e.target as any;\r\n        const newValue = target.newBackend.value;\r\n        if (!!newValue) {\r\n            this.props.addBackend(newValue);\r\n            this.setState({\r\n                newUrl: ''\r\n            });\r\n        }\r\n    }\r\n\r\n    handleNewUrlChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            newUrl: e.target.value,\r\n        });\r\n    }\r\n}","import React from 'react';\r\nexport const AppHeader: React.FunctionComponent<{ isHome: boolean, goHome: () => void }> = ({ isHome, goHome }) => (\r\n    <div className='app-header'>\r\n        {!isHome && <div className='back-home-button' onClick={goHome}>&lt;- Back</div>}\r\n        <h1>.NET Core Profiling Console</h1>\r\n    </div>\r\n);","import React from 'react';\r\n\r\ninterface ConnectionStatusProps {\r\n    baseUrl: string;\r\n\r\n    disconnectBackend: () => void;\r\n}\r\n\r\nexport const ConnectionStatus = (props: ConnectionStatusProps) => (\r\n    <div className='connection-status'>\r\n        <h2>Connection</h2>\r\n        <span>&#x1f5a7; You are connecting to: {props.baseUrl}</span>\r\n        <input className='button' type='button' onClick={props.disconnectBackend} value='Disconnect'></input>\r\n    </div>\r\n);","import React from 'react';\r\nimport { AreaChart, YAxis, XAxis, CartesianGrid, Area, Tooltip } from 'recharts';\r\nimport './MonitorViz.css';\r\nimport { CounterScores } from '../Models/CounterScores';\r\nimport { ColorPalette } from '../Models/ColorPalette';\r\n\r\ninterface MonitorVizProps {\r\n    report: Map<string, number[]>;\r\n}\r\n\r\ninterface MonitorVizState {\r\n    width: number;\r\n}\r\n\r\nexport default class MonitorViz extends React.Component<MonitorVizProps, MonitorVizState> {\r\n    constructor(props: MonitorVizProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            width: 0,\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    render() {\r\n        const { width } = this.state;\r\n        const { report } = this.props;\r\n        let content;\r\n        if (report === undefined || report.size === 0) {\r\n            content = <div className='data-loading-message'>Visualization data not available.</div>\r\n        } else {\r\n            let chartWidth = width < 600 ? width - 24 : width / 3 - 8;\r\n            if (chartWidth < 300) {\r\n                chartWidth = 300;\r\n            }\r\n            let chartHeight = chartWidth * 2 / 4;\r\n            if (chartHeight < 200) {\r\n                chartHeight = 200;\r\n            }\r\n\r\n            content = <>{\r\n                Array.from(report.keys()).sort(this.metricsNameComparer).map((metricName, idxKey) => {\r\n                    const reportItem = report.get(metricName);\r\n                    if (reportItem !== undefined) {\r\n                        const data = reportItem.map((value, index) => { return { key: metricName, value: value, x: index } }) as ReadonlyArray<object>;\r\n                        const color = ColorPalette[idxKey % (Object.keys(ColorPalette).length / 2)];\r\n\r\n                        return <div key={idxKey} style={{ display: 'flex', flexFlow: 'column' }} >\r\n                            <h4 className='chart-title'>{metricName}</h4>\r\n                            <AreaChart\r\n                                width={chartWidth}\r\n                                height={chartHeight}\r\n                                data={data}\r\n                                margin={{ top: 5, right: 20, left: 10, bottom: 5 }}\r\n                            >\r\n                                <defs>\r\n                                    <linearGradient id={color} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                        <stop offset=\"5%\" stopColor={color} stopOpacity={0.6} />\r\n                                        <stop offset=\"95%\" stopColor={color} stopOpacity={.2} />\r\n                                    </linearGradient>\r\n                                </defs>\r\n                                <XAxis stroke='white' dataKey='x' type='number' />\r\n                                <YAxis stroke='white' type='number' />\r\n                                <CartesianGrid strokeDasharray=\"5 2\" vertical={false} strokeWidth='1' stroke='#888888' />\r\n                                <Tooltip wrapperStyle={{ color: 'blue', backgroundColor: 'red' }} isAnimationActive={false} />\r\n                                <Area type=\"monotone\" dataKey=\"value\" strokeWidth={2} stroke={color} fillOpacity={1} fill={\"url(#\" + color + \")\"}\r\n                                    isAnimationActive={false}>\r\n                                </Area>\r\n                            </AreaChart>\r\n                        </div>\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                })\r\n            }\r\n            </>\r\n        }\r\n\r\n        return <div className='monitor-viz'>\r\n            {content}\r\n        </div>;\r\n    }\r\n\r\n    private updateWindowDimensions = () => {\r\n        this.setState({ width: window.innerWidth });\r\n    }\r\n\r\n    private metricsNameComparer: (name1: string, name2: string) => number = (name1, name2) => {\r\n        const fallback = 1000000;\r\n        const n1Score = this.getScore(name1, fallback);\r\n        const n2Score = this.getScore(name2, fallback);\r\n        return n1Score - n2Score;\r\n    }\r\n\r\n    private getScore: (name: string, fallBack: number) => number = (name, fallBack) => {\r\n        let score = fallBack;\r\n        if (name === null || name === undefined) {\r\n            return fallBack;\r\n        }\r\n        for (let counterScore in CounterScores) {\r\n            if (name.startsWith(counterScore)) {\r\n                score = +CounterScores[counterScore];\r\n                break;\r\n            }\r\n        }\r\n        if (score === fallBack) {\r\n            console.warn(name + ' is an unknown metrics.');\r\n        }\r\n        return score;\r\n    }\r\n}","import * as React from 'react'\r\nimport { DefaultButton, PrimaryButton } from 'office-ui-fabric-react/lib/Button';\r\nimport { Panel, PanelType, IPanelProps } from 'office-ui-fabric-react/lib/Panel';\r\nimport { useConstCallback, useId } from '@uifabric/react-hooks';\r\nimport { Profile } from '../Models/Profile';\r\nimport { ChoiceGroup, IChoiceGroupOption } from 'office-ui-fabric-react/lib/ChoiceGroup';\r\nimport { Label } from 'recharts';\r\n\r\ninterface IProfilePickerPanelProps {\r\n    selectedProfile: string | undefined,\r\n    profileArray: Profile[] | undefined,\r\n\r\n    selectProfile: (newValue: string) => void,\r\n    manageProfiles: () => void,\r\n    goHome: () => void,\r\n}\r\n\r\nexport const ProfilePickerPanel: React.FunctionComponent<IProfilePickerPanelProps> = props => {\r\n    const { selectedProfile, profileArray, selectProfile, manageProfiles, goHome } = props;\r\n    const [isOpen, setIsOpen] = React.useState(false);\r\n    const labelId = useId('profileListTitle');\r\n    const labelProperties = {\r\n        id: labelId,\r\n    };\r\n\r\n    const openPanel = useConstCallback(() => setIsOpen(true));\r\n    const dismissPanel = useConstCallback(() => setIsOpen(false));\r\n    const onManageProfiles = useConstCallback(() => {\r\n        goHome();\r\n        manageProfiles();\r\n        dismissPanel();\r\n    });\r\n\r\n    const validProfileArray: Profile[] | undefined = !!profileArray ? profileArray.filter(p => !!p.name && p.name !== 'none') : undefined;\r\n    const activeProfileDetails: Profile | undefined = !!validProfileArray ? validProfileArray.find(p => p.name === selectedProfile) : undefined;\r\n\r\n    const onChange = (ev: React.FormEvent<HTMLElement | HTMLInputElement> | undefined, option: IChoiceGroupOption | undefined): void => {\r\n        if (!!option && !!validProfileArray) {\r\n            const newProfile = validProfileArray.find(p => p.name === option.key);\r\n            if (!!newProfile) {\r\n                if (!!selectProfile && selectedProfile === newProfile.name) {\r\n                    return;\r\n                }\r\n                selectProfile(newProfile.name);\r\n            }\r\n        }\r\n    }\r\n\r\n    const onRenderFooterContent = useConstCallback(() => {\r\n        return <div>\r\n            <PrimaryButton onClick={dismissPanel}>OK</PrimaryButton>\r\n            <DefaultButton onClick={onManageProfiles}>Manage</DefaultButton>\r\n        </div>\r\n    });\r\n\r\n    return (\r\n        <div style={{display: 'flex', alignItems: 'center', marginLeft: 8,}}>\r\n            {!!selectedProfile&& <span>{selectedProfile}</span>}\r\n            <DefaultButton text='Change' onClick={openPanel} />\r\n            <Panel\r\n                type={PanelType.medium}\r\n                headerText={'Active Profile: ' + selectedProfile}\r\n                isOpen={isOpen}\r\n                isLightDismiss={true}\r\n                onDismiss={dismissPanel}\r\n                onRenderFooterContent={onRenderFooterContent}\r\n                isFooterAtBottom={true}\r\n                // You MUST provide this prop! Otherwise screen readers will just say \"button\" with no label.\r\n                closeButtonAriaLabel=\"Close\"\r\n            >\r\n                {!!activeProfileDetails && <div>{activeProfileDetails.description}</div>}\r\n\r\n                <h3>Pick up a new profile</h3>\r\n                {!!validProfileArray &&\r\n                    <div>\r\n                        <Label {...labelProperties}>\r\n                            Pick up a new Profile:\r\n                        </Label>\r\n                        <ChoiceGroup\r\n                            defaultSelectedKey={selectedProfile}\r\n                            options={\r\n                                validProfileArray.sort((a, b) => a.name > b.name ? 1 : -1).map(item => {\r\n                                    return { key: item.name, text: item.name }\r\n                                })\r\n                            }\r\n                            onChange={onChange}\r\n                            ariaLabelledBy={labelId}\r\n                        />\r\n                    </div>\r\n                }\r\n            </Panel>\r\n        </div>\r\n    );\r\n}","import * as React from 'react';\r\nimport MonitorViz from './MonitorViz';\r\nimport './MonitorPage.css';\r\nimport { TraceSession } from '../Models/TraceSession';\r\nimport * as signalR from \"@microsoft/signalr\";\r\nimport { ProfilePickerPanel } from './ProfilePickerPanel';\r\nimport { Profile } from '../Models/Profile';\r\nimport { DefaultButton, PrimaryButton } from 'office-ui-fabric-react/lib/Button';\r\n\r\ninterface MonitorPageProps {\r\n    processId: number;\r\n    sessionId: number;\r\n    isDumping: boolean;\r\n    traceSessionArray: TraceSession[] | undefined;\r\n    selectedEndpoint: string;\r\n    selectedProfile: string | undefined;\r\n    profileArray: Profile[] | undefined;\r\n\r\n    exitMonitor: () => void;\r\n    takeDumpAsync: (processId: number, isMini: boolean) => Promise<any>;\r\n    startProfilingAsync: (processId: number) => Promise<boolean>;\r\n    stopProfilingAsync: (processId: number, sessionId: number) => Promise<boolean>;\r\n    selectProfile: (newValue: string) => void\r\n    manageProfiles: () => void;\r\n    goHome: () => void;\r\n}\r\n\r\ninterface MonitorPageStates {\r\n    report: Map<string, number[]>;\r\n    counterHub: signalR.HubConnection | null;\r\n}\r\n\r\nclass MonitorPage extends React.Component<MonitorPageProps, MonitorPageStates> {\r\n    constructor(props: MonitorPageProps) {\r\n        super(props);\r\n\r\n        let connection: signalR.HubConnection | null = new signalR.HubConnectionBuilder()\r\n            .withUrl(`${this.props.selectedEndpoint}/counterHub`)\r\n            .withAutomaticReconnect()\r\n            .build();\r\n\r\n        connection.on(\"updateCounterAsync\", this.onUpdate);\r\n\r\n        connection.start().catch(err => { alert(err); connection = null; });\r\n\r\n        this.state = {\r\n            report: new Map(),\r\n            counterHub: connection,\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.counterHub !== null) {\r\n            this.state.counterHub.stop();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { processId,\r\n            sessionId,\r\n            exitMonitor,\r\n            takeDumpAsync,\r\n            isDumping,\r\n            traceSessionArray,\r\n            startProfilingAsync,\r\n            stopProfilingAsync,\r\n            selectedProfile,\r\n            profileArray,\r\n            selectProfile,\r\n            manageProfiles: manageProfile,\r\n            goHome,\r\n        } = this.props;\r\n\r\n        const dumpButtonClassName: string = 'button' + (isDumping ? ' disabled' : '');\r\n        const profilingSession = traceSessionArray === undefined ? undefined :\r\n            traceSessionArray.find(session => session.processId === processId && session.processId !== sessionId && session.type === 0);\r\n        return <div className='monitor-page'>\r\n            <div className='header'>\r\n                <h2>Monitoring</h2>\r\n                <h3>Session: {sessionId} Process: {processId}</h3>\r\n\r\n                <div className='actionSection'>\r\n                    <h3>Profiling:</h3>\r\n                    {!!profilingSession &&\r\n                        <PrimaryButton onClick={async () => {\r\n                            if (profilingSession !== undefined) {\r\n                                await stopProfilingAsync(profilingSession.processId, profilingSession.sessionId);\r\n                            }\r\n                        }}\r\n                        >Stop Profiling</PrimaryButton>}\r\n                    {!profilingSession &&\r\n                        <PrimaryButton onClick={async () => {\r\n                            await startProfilingAsync(processId);\r\n                        }}\r\n                        >Start Profiling</PrimaryButton>}\r\n\r\n                    <h3>Configurations:</h3>\r\n                    <ProfilePickerPanel selectedProfile={selectedProfile}\r\n                        profileArray={profileArray}\r\n                        selectProfile={selectProfile}\r\n                        manageProfiles={manageProfile}\r\n                        goHome={goHome} />\r\n                    <DefaultButton onClick={this.onManageProfiles}>Manage Profiles</DefaultButton>\r\n                </div>\r\n\r\n                <div className='actionSection'>\r\n                    <h3>Dumps:</h3>\r\n                    <DefaultButton onClick={async () => await takeDumpAsync(processId, false)} disabled={isDumping}>Heap Dump</DefaultButton>\r\n                    <DefaultButton onClick={async () => await takeDumpAsync(processId, true)} disabled={isDumping}>Mini Dump</DefaultButton>\r\n                </div>\r\n            </div>\r\n            <div className='viz'>\r\n                <MonitorViz report={this.state.report} />\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    private onUpdate:\r\n        (processId: number, sessionId: number, metricName: string, metricValue: number) => void\r\n        = (processId, sessionId, metricName, metricValue) => {\r\n            if (processId === this.props.processId && sessionId === this.props.sessionId) {\r\n                const newReport = this.reportCache;\r\n                if (newReport.has(metricName)) {\r\n                    // Exists\r\n                    const array = newReport.get(metricName);\r\n                    if (array != null) {\r\n                        while (array.length >= this.maxDataPointCount) {\r\n                            array.shift();\r\n                        }\r\n                        array.push(metricValue);\r\n                        newReport.set(metricName, array);\r\n                    }\r\n                } else {\r\n                    // Doesn't exist\r\n                    newReport.set(metricName, [metricValue]);\r\n                }\r\n\r\n                // Update no frequent than 1 second.\r\n                this.reportCache = newReport;\r\n                if (this.lastUpdate === undefined) {\r\n                    this.lastUpdate = new Date();\r\n                    this.setState({\r\n                        report: this.reportCache,\r\n                    });\r\n                } else {\r\n                    const now = new Date();\r\n                    const delta = now.getTime() - this.lastUpdate.getTime();\r\n                    if (delta >= 500) {\r\n                        this.lastUpdate = now;\r\n\r\n                        console.debug('Report:');\r\n                        newReport.forEach((v, k) => {\r\n                            console.debug(`${k}:${v.length}`);\r\n                        });\r\n\r\n                        this.setState({\r\n                            report: newReport\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    private onManageProfiles: () => void = () => {\r\n        this.props.goHome();\r\n        this.props.manageProfiles();\r\n    }\r\n\r\n    private reportCache: Map<string, number[]> = new Map();\r\n    private lastUpdate: Date | undefined = undefined;\r\n\r\n    readonly maxDataPointCount: number = 60;\r\n}\r\n\r\nexport default MonitorPage;","import React, { ChangeEvent, FormEvent } from 'react';\r\nimport { Profile } from '../Models/Profile';\r\nimport { Modal } from 'office-ui-fabric-react/lib/Modal';\r\nimport './ProfileManager.css';\r\nimport { getId } from '@uifabric/utilities';\r\nimport { Provider } from '../Models/Provider';\r\nimport * as FileSaver from 'file-saver';\r\n\r\ninterface IProfileManagerProps {\r\n    profileArray: Profile[] | undefined;\r\n    selectedProfile: Profile | undefined;\r\n\r\n    setManageProfile: (value: Profile | undefined) => void;\r\n    addProfileAsync: (newProfile: Profile) => Promise<Profile>;\r\n    deleteProfileAsync: (name: string) => Promise<boolean>;\r\n    refreshProfile: () => void;\r\n    appendProvider: (newProvider: Provider) => void;\r\n    removeProvider: (name: string) => void;\r\n}\r\n\r\ninterface IProfileManagerState {\r\n    // New Profile\r\n    isShowNewProfileModel: boolean;\r\n    newProfileName: string;\r\n    newProfileDescription: string;\r\n    // Delete Profile\r\n    isConfirmDeletingProfile: boolean;\r\n    // Add Provider\r\n    isShowAddProvider: boolean;\r\n    newProvider: Provider;\r\n}\r\n\r\nexport class ProfileManager extends React.Component<IProfileManagerProps, IProfileManagerState> {\r\n    private readonly _newProfileInputId = getId('_newProfileInputId');\r\n    private readonly _newProfileDescriptionId = getId('_newProfileDescriptionId');\r\n\r\n    private readonly _newProviderNameId = getId('_newProviderNameId');\r\n    private readonly _newProviderKeywordId = getId('_newProviderKeywordId');\r\n    private readonly _newProviderEventLevelId = getId('_newProviderEventLevelId');\r\n    private readonly _newProviderFilterId = getId('_newProviderFilterId');\r\n\r\n\r\n    constructor(props: IProfileManagerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isShowNewProfileModel: false,\r\n            isConfirmDeletingProfile: false,\r\n            newProfileName: '',\r\n            newProfileDescription: '',\r\n\r\n            isShowAddProvider: false,\r\n            newProvider: {\r\n                name: '',\r\n                keywordsHex: '0x0',\r\n                filterData: '',\r\n                eventLevel: 5,\r\n            }\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.pickFirstProfile();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.pickFirstProfile();\r\n    }\r\n\r\n    render() {\r\n        const { profileArray, selectedProfile } = this.props;\r\n        const effectiveProfileArray = profileArray === undefined ? undefined : profileArray.filter(p => p.name !== 'none');\r\n\r\n        let profileList = null;\r\n        if (effectiveProfileArray !== undefined) {\r\n            profileList = effectiveProfileArray.sort((p1, p2) => {\r\n                if (p1.name > p2.name) return 1;\r\n                return -1;\r\n            }).map((profile, index) => {\r\n                return <div className='ProfileNameRadioButton' key={index} title={profile.name}>\r\n                    <input type='radio'\r\n                        name='profileName'\r\n                        value={profile.name}\r\n                        checked={!!selectedProfile && selectedProfile.name === profile.name}\r\n                        onChange={e => {\r\n                            console.log(e.target.value);\r\n                            if (!!e.target && !!e.target.value) {\r\n                                const selected = effectiveProfileArray.find(p => p.name === e.target.value)\r\n                                this.props.setManageProfile(selected);\r\n                            }\r\n                        }}\r\n                    />{profile.name}\r\n                </div>;\r\n            });\r\n            profileList = <div>\r\n                {profileList}\r\n                <Modal\r\n                    isOpen={this.state.isShowNewProfileModel}\r\n                    isBlocking={true}>\r\n                    <div className='dialog-container dark-theme'>\r\n                        <div className='title-container'>Add a Profile</div>\r\n                        <div className='content-container' role='presentation'>\r\n                            <form onSubmit={this.handleNewProfileSubmit}>\r\n                                <div role='presentation'>\r\n                                    <label htmlFor={this._newProfileInputId}>Profile Name:</label>\r\n                                    <input id={this._newProfileInputId} type='input' value={this.state.newProfileName} onChange={this.handleNewProfileName}\r\n                                        placeholder='New profile name.'></input>\r\n                                </div>\r\n                                <div role='presentation'>\r\n                                    <label htmlFor={this._newProfileDescriptionId}>Description:</label>\r\n                                    <input id={this._newProfileDescriptionId} type='input' value={this.state.newProfileDescription} onChange={this.handleNewProfileDescription}\r\n                                        placeholder='Description of the Profile.'></input>\r\n                                </div>\r\n                                <div className='button-section'>\r\n                                    <input type='submit' className='button' value='Submit' />\r\n                                    <input type='button' className='button' value='Cancel' onClick={() => {\r\n                                        this.setState({\r\n                                            isShowNewProfileModel: false,\r\n                                            newProfileName: '',\r\n                                        });\r\n                                    }} />\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n                <Modal isOpen={this.state.isConfirmDeletingProfile}\r\n                    isBlocking={true} isDarkOverlay={true}>\r\n                    <div className='dialog-container dark-theme'>\r\n                        <div className='title-container'>Delete a Profile</div>\r\n                        <div className='content-container' role='presentation'>\r\n                            <form onSubmit={this.handleDeleteProfileSubmit}>\r\n                                <span>Are you sure you want to delete the profile: {!!this.props.selectedProfile && this.props.selectedProfile.name}</span>\r\n                                <div className='button-section'>\r\n                                    <input type='submit' className='button' value='Yes' />\r\n                                    <input type='button' className='button' value='No' onClick={() => {\r\n                                        this.setState({\r\n                                            isConfirmDeletingProfile: false,\r\n                                        });\r\n                                    }} />\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n        } else {\r\n            profileList = <div>No profile.</div>\r\n        }\r\n\r\n        let profileDetails;\r\n        if (!!selectedProfile) {\r\n            profileDetails = <>\r\n                <h2>\r\n                    Profile: {selectedProfile.name}\r\n                </h2>\r\n                <div>{selectedProfile.description}</div>\r\n                <h3>Providers</h3>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Keywords</th>\r\n                            <th>EventLevel</th>\r\n                            <th>Filter</th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {selectedProfile.providers.map((provider, index) => {\r\n                            return <tr key={provider.name}>\r\n                                <td>{provider.name}</td>\r\n                                <td>{provider.keywordsHex}</td>\r\n                                <td>{provider.eventLevel}</td>\r\n                                <td>{provider.filterData}</td>\r\n                                <td><input type='button' value='Delete' className='button' onClick={() => { this.handleRemoveProvider(provider.name); }} /></td>\r\n                            </tr>;\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n                <input type='button' value='Add' className='button' onClick={() => this.setState({ isShowAddProvider: true })} />\r\n                <Modal isOpen={this.state.isShowAddProvider} isBlocking={true} isDarkOverlay={true}>\r\n                    <div className='dialog-container dark-theme'>\r\n                        <div className='title-container'>Add a provider</div>\r\n                        <div className='content-container' role='presentation'>\r\n                            <form onSubmit={this.handleAddProvider}>\r\n                                <table className='ProviderTable'>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <td><label htmlFor={this._newProviderNameId}>Name:</label></td>\r\n                                            <td><input id={this._newProviderNameId}\r\n                                                type='input'\r\n                                                value={this.state.newProvider.name}\r\n                                                onChange={this.handleChangeForNewProvider('name')}\r\n                                                placeholder='New provider name'></input></td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>\r\n                                                <label htmlFor={this._newProviderKeywordId}>Keyword:</label>\r\n                                            </td>\r\n                                            <td>\r\n                                                <input id={this._newProviderKeywordId}\r\n                                                    type='input'\r\n                                                    value={this.state.newProvider.keywordsHex} onChange={this.handleChangeForNewProvider('keywordsHex')}\r\n                                                    placeholder='Keywords'></input>\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>\r\n                                                <label htmlFor={this._newProviderEventLevelId}>Event Level:</label>\r\n                                            </td>\r\n                                            <td>\r\n                                                <select value={this.state.newProvider.eventLevel} onChange={this.handleChangeForNewProvider('eventLevel')}>\r\n                                                    <option value={0}>Always Log</option>\r\n                                                    <option value={1}>Critical</option>\r\n                                                    <option value={2}>Error</option>\r\n                                                    <option value={3}>Warning</option>\r\n                                                    <option value={4}>Informational</option>\r\n                                                    <option value={5}>Verbose</option>\r\n                                                </select>\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>\r\n                                                <label htmlFor={this._newProviderFilterId}>Filter:</label>\r\n                                            </td>\r\n                                            <td>\r\n                                                <input id={this._newProviderFilterId} type='input'\r\n                                                    value={this.state.newProvider.filterData}\r\n                                                    onChange={this.handleChangeForNewProvider('filterData')}\r\n                                                    placeholder='RegEx filter'></input>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                                <div className='button-section'>\r\n                                    <input type='submit' className='button' value='OK' />\r\n                                    <input type='button' className='button' value='Cancel' onClick={() => {\r\n                                        this.setState({\r\n                                            isShowAddProvider: false,\r\n                                        });\r\n                                    }} />\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n                {!!this.props.selectedProfile &&\r\n                    <div className='profileRawText'>\r\n                        <div>RAW:</div>\r\n                        <textarea className='profileRawTextArea' readOnly value={JSON.stringify(this.props.selectedProfile)}></textarea>\r\n                    </div>}\r\n            </>\r\n        } else {\r\n            profileDetails = <div>Select or create a profile first.</div>\r\n        }\r\n\r\n        let exportProfiles;\r\n        if (effectiveProfileArray !== undefined) {\r\n            exportProfiles = <div>\r\n                <input type='button' className='button' value='Export All'\r\n                    onClick={() => {\r\n                        FileSaver.saveAs('http://localhost:9400/profiles', 'profiles.json');\r\n                    }} />\r\n            </div>\r\n        }\r\n\r\n        return <div className='ProfileManager'>\r\n            <div className='ProfileList'>\r\n                <div className='HeaderContainer'>\r\n                    <h2>Pick a Profile</h2>\r\n                    &nbsp;(<div className='AddRemoveButton' onClick={() => this.setState({ isShowNewProfileModel: true })}>+</div>\r\n                    /\r\n                    <div className='AddRemoveButton' onClick={() => this.setState({ isConfirmDeletingProfile: true })}>-</div>)\r\n                </div>\r\n                {profileList}\r\n                {exportProfiles}\r\n            </div>\r\n            <div className='ProfileDetails'>\r\n                {profileDetails}\r\n            </div>\r\n        </div>\r\n    }\r\n    private handleRemoveProvider(name: string) {\r\n        this.props.removeProvider(name);\r\n    }\r\n\r\n    private handleNewProfileName: ((event: ChangeEvent<HTMLInputElement>) => void) | undefined = (event) => {\r\n        this.setState({\r\n            newProfileName: event.target.value,\r\n        });\r\n    }\r\n\r\n    private handleNewProfileDescription: ((event: ChangeEvent<HTMLInputElement>) => void) | undefined = (event) => {\r\n        this.setState({\r\n            newProfileDescription: event.target.value,\r\n        });\r\n    }\r\n\r\n    private handleNewProfileSubmit: ((event: FormEvent<HTMLFormElement>) => void) | undefined = async (event) => {\r\n        event.preventDefault();\r\n        const result = await this.props.addProfileAsync({\r\n            name: this.state.newProfileName,\r\n            description: this.state.newProfileDescription,\r\n            providers: []\r\n        });\r\n\r\n        if (result !== null) {\r\n            this.setState({\r\n                isShowNewProfileModel: false,\r\n                newProfileDescription: '',\r\n                newProfileName: '',\r\n            });\r\n            this.props.refreshProfile();\r\n        }\r\n    }\r\n\r\n    private pickFirstProfile() {\r\n        if (!!this.props.profileArray && this.props.profileArray.length > 0 && !this.props.selectedProfile) {\r\n            this.props.setManageProfile(this.props.profileArray[0]);\r\n        }\r\n    }\r\n\r\n    private handleDeleteProfileSubmit: ((event: FormEvent<HTMLFormElement>) => void) | undefined = async (event) => {\r\n        event.preventDefault();\r\n        if (this.props.selectedProfile !== undefined) {\r\n            const result = await this.props.deleteProfileAsync(this.props.selectedProfile.name);\r\n            if (result) {\r\n                this.setState({\r\n                    isConfirmDeletingProfile: false,\r\n                });\r\n                this.props.setManageProfile(undefined);\r\n                this.props.refreshProfile();\r\n            } else {\r\n                alert('Fail to delete profiler: ' + this.props.selectedProfile.name);\r\n            }\r\n        } else {\r\n            alert('No selected profile.');\r\n        }\r\n    }\r\n\r\n    private handleAddProvider: ((event: FormEvent<HTMLFormElement>) => void) | undefined = async (event) => {\r\n        event.preventDefault();\r\n        const { newProvider } = this.state;\r\n        if (!!newProvider.name && !!newProvider.keywordsHex) {\r\n            this.props.appendProvider(newProvider);\r\n            this.setState({\r\n                newProvider: {\r\n                    name: '',\r\n                    keywordsHex: '0x0',\r\n                    eventLevel: 5,\r\n                    filterData: '',\r\n                },\r\n                isShowAddProvider: false,\r\n            });\r\n        } else {\r\n            alert('Provider Name & Keywords are required.');\r\n        }\r\n    }\r\n\r\n    handleChangeForNewProvider = (propertyName: string) => (event: ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n        const { newProvider } = this.state;\r\n        const newState = {\r\n            ...newProvider,\r\n            [propertyName]: event.target.value\r\n        };\r\n        this.setState({ newProvider: newState });\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport './Components/Processes'\r\nimport Process from './Models/Process';\r\nimport { TraceSession } from './Models/TraceSession';\r\n\r\nimport Processes from './Components/Processes';\r\nimport TraceSessions from './Components/TraceSessions';\r\nimport TraceFile from './Models/TraceFile';\r\nimport TraceRepo from './Components/TraceRepo';\r\nimport ConnectingToBackend from './Components/ConnectingToBackend';\r\nimport { AppHeader } from './Components/AppHeader';\r\nimport { ConnectionStatus } from './Components/ConnectionStatus';\r\nimport { Profile } from './Models/Profile';\r\nimport ProfilePicker from './Components/ProfilePicker';\r\nimport { MonitorReport } from './Models/MonitorReport';\r\nimport MonitorPage from './Components/MonitorPage';\r\nimport { ProfileManager } from './Components/ProfileManager';\r\nimport { Provider } from './Models/Provider';\r\n\r\ninterface AppState {\r\n  processArray: Process[] | undefined;\r\n  traceSessionArray: TraceSession[] | undefined;\r\n  traceFileArray: TraceFile[] | undefined;\r\n  isReady: boolean;\r\n  isBackendReady: boolean;\r\n  backendUrlArray: string[];\r\n  baseUrl: string;\r\n  profileArray: Profile[] | undefined;\r\n  selectedProfile: string | undefined;\r\n  isDumping: boolean;\r\n  selectedSession: undefined | TraceSession;\r\n  isShowMonitor: boolean;\r\n  isManageProfile: boolean;\r\n  selectedProfileForManage: Profile | undefined;\r\n}\r\n\r\nexport default class App extends Component<any, AppState>{\r\n  readonly BackendListKey: string = 'backendList';\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    // Initial state\r\n    this.state = {\r\n      processArray: undefined,\r\n      traceSessionArray: undefined,\r\n      traceFileArray: undefined,\r\n      isReady: false,\r\n      isBackendReady: false,\r\n      backendUrlArray: this.getList(),\r\n      baseUrl: '',\r\n      profileArray: undefined,\r\n      selectedProfile: undefined,\r\n      selectedProfileForManage: undefined,\r\n      isDumping: false,\r\n      selectedSession: undefined,\r\n      isShowMonitor: false,\r\n      isManageProfile: false,\r\n    };\r\n\r\n    this.removeProvider = this.removeProvider.bind(this);\r\n    this.appendProvider = this.appendProvider.bind(this);\r\n    this.takeDumpAsync = this.takeDumpAsync.bind(this);\r\n    this.selectProfile = this.selectProfile.bind(this);\r\n    this.manageProfile = this.manageProfile.bind(this);\r\n\r\n    this.goHome = this.goHome.bind(this);\r\n  }\r\n  render() {\r\n    let content;\r\n\r\n    if (!this.state.isBackendReady) {\r\n      content = <ConnectingToBackend\r\n        backendUrlArray={this.state.backendUrlArray}\r\n        addBackend={this.addBackend}\r\n        removeBackend={this.removeBackend}\r\n        connectToBackendAsync={this.connectToBackendAsync}\r\n      />;\r\n    } else {\r\n      const { isShowMonitor, selectedSession, isManageProfile, profileArray } = this.state;\r\n      if (!this.state.isReady) {\r\n        return null;\r\n      }\r\n\r\n      if (isShowMonitor && selectedSession !== undefined) {\r\n        content = <MonitorPage\r\n          selectedEndpoint={this.state.baseUrl}\r\n          traceSessionArray={this.state.traceSessionArray}\r\n          isDumping={this.state.isDumping}\r\n          processId={selectedSession.processId}\r\n          sessionId={selectedSession.sessionId}\r\n          exitMonitor={() => { this.setShowMonitoring(false); }}\r\n          takeDumpAsync={this.takeDumpAsync}\r\n          startProfilingAsync={this.startProfilingAsync}\r\n          stopProfilingAsync={this.stopProfilingAsync}\r\n          selectedProfile={this.state.selectedProfile}\r\n          profileArray={this.state.profileArray}\r\n          selectProfile={this.selectProfile}\r\n          manageProfiles={() => this.manageProfile(true)}\r\n          goHome={this.goHome}\r\n        />\r\n      }\r\n      else if (isManageProfile) {\r\n        content = <ProfileManager\r\n          profileArray={profileArray}\r\n          selectedProfile={this.state.selectedProfileForManage}\r\n          setManageProfile={this.setManageProfile}\r\n          addProfileAsync={this.addNewProfileAsync}\r\n          refreshProfile={this.loadProfilesAsync}\r\n          deleteProfileAsync={this.deleteProfileAsync}\r\n          appendProvider={this.appendProvider}\r\n          removeProvider={this.removeProvider}\r\n        ></ProfileManager>\r\n      } else {\r\n        content = <>\r\n          <div className='section'>\r\n            <ConnectionStatus baseUrl={this.state.baseUrl}\r\n              disconnectBackend={this.disconnectBackend}\r\n            />\r\n            <Processes\r\n              refreshProcessAsync={this.loadProcessesAsync}\r\n              startProfilingAsync={this.startProfilingAsync}\r\n              startMonitoringAsync={this.startMonitoringAsync}\r\n              takeDumpAsync={this.takeDumpAsync}\r\n              processArray={this.state.processArray}\r\n              isDumping={this.state.isDumping}\r\n            />\r\n            <TraceSessions\r\n              traceSessions={this.state.traceSessionArray}\r\n              stopProfilingAsync={this.stopProfilingAsync}\r\n              stopMonitoringAsync={this.stopMonitoringAsync}\r\n              loadTraceSessionsAsync={this.loadTraceSessionsAsync}\r\n              setAsSelected={this.setSelectedSession} />\r\n            <TraceRepo\r\n              baseUrl={this.state.baseUrl}\r\n              loadTraceFilesAsync={this.loadTraceFilesAsync}\r\n              convertToSpeedscopeAsync={this.convertToSpeedscopeAsync}\r\n              fileArray={this.state.traceFileArray}\r\n            />\r\n          </div>\r\n        </>;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className='dark-theme'>\r\n        <AppHeader isHome={\r\n          (!this.state.isBackendReady) ||\r\n          (this.state.isBackendReady &&\r\n            !this.state.isShowMonitor &&\r\n            !this.state.isManageProfile)}\r\n          goHome={this.goHome} />\r\n        <div className='app-container'>\r\n          {content}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private initializeAsync: () => Promise<any> = async () => {\r\n    await Promise.all([\r\n      this.loadProcessesAsync(),\r\n      this.loadTraceSessionsAsync(),\r\n      this.loadTraceFilesAsync(),\r\n      this.loadProfilesAsync(),\r\n    ]);\r\n\r\n    this.selectProfile('runtime-basic');\r\n\r\n    this.setState({\r\n      isReady: true,\r\n    });\r\n  }\r\n\r\n  // Processes\r\n  private loadProcessesAsync: () => Promise<void> = async () => {\r\n    try {\r\n      const processes = await this.getProcessesAsync();\r\n      this.setState({\r\n        processArray: processes,\r\n      });\r\n    } catch (ex) {\r\n      this.setState({\r\n        processArray: undefined,\r\n      });\r\n    }\r\n  }\r\n  private getProcessesAsync: () => Promise<Process[]> = async () => {\r\n    const response = await fetch(`${this.state.baseUrl}/processes`);\r\n    if (!!response && response.ok) {\r\n      const results: Process[] = await response.json();\r\n      return results;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  // Traces\r\n  private startProfilingAsync: (processId: number) => Promise<boolean> = async (processId: number) => {\r\n    const response = await fetch(`${this.state.baseUrl}/traces`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        processId: processId,\r\n        profile: this.state.selectedProfile,\r\n      }),\r\n    });\r\n\r\n    const result = !!response && response.ok;\r\n    if (result) {\r\n      await this.loadTraceSessionsAsync();\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private stopProfilingAsync: (processId: number, sessionId: number) => Promise<boolean> = async (processId: number, sessionId: number) => {\r\n    const response = await fetch(`${this.state.baseUrl}/traces/${processId}?sessionId=${sessionId}`, {\r\n      method: 'DELETE',\r\n    });\r\n\r\n    const result = !!response && response.ok;\r\n    if (result) {\r\n      await Promise.all([this.loadTraceSessionsAsync(), this.loadTraceFilesAsync()]);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Monitoring\r\n  private startMonitoringAsync: (processId: number) => Promise<boolean> = async (processId) => {\r\n    const response = await fetch(`${this.state.baseUrl}/monitors`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        processId\r\n      }),\r\n    });\r\n\r\n    const result = !!response && response.ok;\r\n    if (result) {\r\n      await this.loadTraceSessionsAsync();\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private stopMonitoringAsync: (processId: number, sessionId: number) => Promise<boolean> = async (processId, sessionId) => {\r\n    const response = await fetch(`${this.state.baseUrl}/monitors`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        processId,\r\n        id: sessionId,\r\n      }),\r\n    });\r\n\r\n    const result = !!response && response.ok;\r\n    if (result) {\r\n      await this.loadTraceSessionsAsync();\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Sessions\r\n  private loadTraceSessionsAsync: () => Promise<void> = async () => {\r\n    try {\r\n      const traceSessions = await this.getTraceSessionsAsync();\r\n      this.setState({\r\n        traceSessionArray: traceSessions,\r\n      });\r\n    } catch{\r\n      this.setState({\r\n        traceSessionArray: undefined,\r\n      });\r\n    }\r\n  }\r\n\r\n  private getTraceSessionsAsync: () => Promise<TraceSession[]> = async () => {\r\n    const response = await fetch(`${this.state.baseUrl}/sessions`);\r\n    if (!!response && response.ok) {\r\n      const result: TraceSession[] = await response.json();\r\n      return result;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private setSelectedSession: (traceSession: TraceSession | undefined) => void = (selectedSession) => {\r\n    const newState: Partial<AppState> = {\r\n      selectedSession\r\n    };\r\n    if (selectedSession === undefined) {\r\n      newState.isShowMonitor = false;\r\n    } else if (!this.state.isShowMonitor) {\r\n      newState.isShowMonitor = true;\r\n    }\r\n    this.setState(newState as AppState);\r\n  }\r\n\r\n  private getReportAsync: () => Promise<MonitorReport | undefined> = async () => {\r\n    const { selectedSession } = this.state;\r\n    if (selectedSession === undefined) {\r\n      return undefined;\r\n    }\r\n    const response = await fetch(`${this.state.baseUrl}/Monitors/${selectedSession.processId}/${selectedSession.sessionId}`);\r\n    if (!!response && response.ok) {\r\n      const result: MonitorReport = await response.json();\r\n      return result;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  private setShowMonitoring: (value: boolean) => void = (value) => {\r\n    this.setState({\r\n      isShowMonitor: value,\r\n    });\r\n  }\r\n\r\n  // Repository\r\n  private loadTraceFilesAsync: () => Promise<void> = async () => {\r\n    try {\r\n      const files = await this.getTraceFilesAsync();\r\n      this.setState({\r\n        traceFileArray: files,\r\n      });\r\n    } catch{\r\n      this.setState({\r\n        traceFileArray: undefined,\r\n      });\r\n    }\r\n  }\r\n\r\n  private getTraceFilesAsync: () => Promise<TraceFile[]> = async () => {\r\n    const response = await fetch(`${this.state.baseUrl}/traceFiles`);\r\n    if (!!response && response.ok) {\r\n      const result: TraceFile[] = await response.json();\r\n      return result;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private convertToSpeedscopeAsync: (fileName: string) => Promise<boolean> = async (fileName) => {\r\n    const response = await fetch(`${this.state.baseUrl}/traceFiles`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        fileName,\r\n      }),\r\n    });\r\n    if (!!response && response.ok) {\r\n      await this.loadTraceFilesAsync();\r\n      return true;\r\n    } else {\r\n      const error = await response.json();\r\n\r\n      alert('Converting failed.' + !!error.error ? ' Details: ' + error.error : '');\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Backend\r\n  private addBackend: (url: string) => void = (url: string) => {\r\n    url = url.toLowerCase();\r\n    const list = this.getList();\r\n    if (!list.includes(url)) {\r\n      list.push(url);\r\n    }\r\n    localStorage.setItem(this.BackendListKey, JSON.stringify(list));\r\n    this.setState({\r\n      backendUrlArray: list\r\n    });\r\n  }\r\n\r\n  private removeBackend: (url: string) => void = (url: string): void => {\r\n    url = url.toLowerCase();\r\n    let list = this.getList();\r\n    list = list.filter(item => item !== url);\r\n    localStorage.setItem(this.BackendListKey, JSON.stringify(list));\r\n    this.setState({\r\n      backendUrlArray: list\r\n    });\r\n  }\r\n\r\n  private getList(): string[] {\r\n    const urlListSerialized: string | null = localStorage.getItem(this.BackendListKey);\r\n    let list: string[];\r\n    if (urlListSerialized === null || urlListSerialized === '' || urlListSerialized === '[]') {\r\n      list = ['http://localhost:9400', 'http://apmexp-demo.southcentralus.azurecontainer.io'];\r\n    } else {\r\n      list = JSON.parse(urlListSerialized);\r\n    }\r\n    return list;\r\n  }\r\n\r\n  private disconnectBackend: () => void = () => {\r\n    this.setState({\r\n      baseUrl: '',\r\n      isReady: false,\r\n      isBackendReady: false,\r\n    });\r\n  }\r\n\r\n  private connectToBackendAsync: (url: string) => Promise<boolean> = async (url: string) => {\r\n    try {\r\n      url = url.trim();\r\n      if (!url.startsWith('http') && !url.startsWith('https')) {\r\n        return false;\r\n      }\r\n      if (url.endsWith('/')) {\r\n        url = url.substring(0, url.length - 1);\r\n      }\r\n      const response = await fetch(url + '/processes');\r\n      if (!!response && response.ok) {\r\n        this.setState({\r\n          isBackendReady: true,\r\n          baseUrl: url,\r\n        });\r\n        await this.initializeAsync();\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Profiles\r\n  private manageProfile: (value: boolean) => void = (value) => {\r\n    this.setState({\r\n      isManageProfile: value,\r\n    });\r\n  }\r\n\r\n  private setManageProfile: (value: Profile | undefined) => void = (value) => {\r\n    this.setState({\r\n      selectedProfileForManage: value,\r\n    });\r\n  }\r\n\r\n  private loadProfilesAsync: () => void = async () => {\r\n    const result = await this.getProfilesAsync();\r\n    if (result.length > 0) {\r\n      this.setState({\r\n        profileArray: result,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        profileArray: undefined,\r\n      });\r\n    }\r\n  }\r\n\r\n  private getProfilesAsync: () => Promise<Profile[]> = async () => {\r\n    const response = await fetch(`${this.state.baseUrl}/profiles`);\r\n    if (!!response && response.ok) {\r\n      const result: Profile[] = await response.json();\r\n      return result;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private selectProfile: (newValue: string) => void = (newValue: string) => {\r\n    this.setState({\r\n      selectedProfile: newValue\r\n    });\r\n  }\r\n\r\n  private addNewProfileAsync: (newProfile: Profile) => Promise<Profile> = async (newProfile) => {\r\n    const response = await fetch(`${this.state.baseUrl}/profiles`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(newProfile),\r\n    });\r\n    if (!!response && response.ok) {\r\n      return response.json();\r\n    } else {\r\n      const error = await response.json();\r\n      alert(error);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Append a provider to selected profile */\r\n  private appendProvider(newProvider: Provider) {\r\n    const selectedProvider = Object.assign({}, this.state.selectedProfileForManage);\r\n    selectedProvider.providers.push(newProvider);\r\n    this.setState({\r\n      selectedProfileForManage: selectedProvider,\r\n    });\r\n\r\n    this.updateProfileAsync();\r\n  }\r\n\r\n  // Remove a provider from selected profile\r\n  private removeProvider(name: string): void {\r\n    if (!name) return;\r\n    const selectedProvider = Object.assign({}, this.state.selectedProfileForManage);\r\n    selectedProvider.providers = selectedProvider.providers.filter(p => p.name !== name);\r\n    this.setState({\r\n      selectedProfileForManage: selectedProvider,\r\n    });\r\n\r\n    this.updateProfileAsync();\r\n  }\r\n\r\n  private updateProfileAsync: () => Promise<any> = async () => {\r\n    if (!!this.state.selectedProfileForManage) {\r\n      const newProfile = this.state.selectedProfileForManage;\r\n\r\n      const response = await fetch(`${this.state.baseUrl}/profiles/${newProfile.name}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(newProfile),\r\n      });\r\n      if (!!response && response.ok) {\r\n        return response.json();\r\n      } else {\r\n        const error = await response.json();\r\n        if (error.title) {\r\n          alert(error.title);\r\n        } else {\r\n          alert(error);\r\n        }\r\n      }\r\n    } else {\r\n      alert('No profile for updating...');\r\n    }\r\n  }\r\n\r\n  private deleteProfileAsync: (name: string) => Promise<boolean> = async (name) => {\r\n    const response = await fetch(`${this.state.baseUrl}/profiles/${encodeURI(name)}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    let result: boolean = false;\r\n    if (!!response && response.ok) {\r\n      result = true;\r\n    } else {\r\n      const error = await response.json();\r\n      alert(error);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Dumps\r\n  private takeDumpAsync: (processId: number, isMini: boolean) => Promise<any> = async (processId, isMini) => {\r\n    this.setState({\r\n      isDumping: true,\r\n    });\r\n    const DUMP_TYPE_HEAP = 0;\r\n    const DUMP_TYPE_MINI = 1;\r\n    const dumpType = isMini ? DUMP_TYPE_MINI : DUMP_TYPE_HEAP;\r\n    const response = await fetch(`${this.state.baseUrl}/dumps`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        processId,\r\n        dumpType,\r\n      }),\r\n    });\r\n    if (!!response && response.ok) {\r\n      await this.loadTraceFilesAsync();\r\n      alert('Dump crated for process ' + processId);\r\n      this.setState({ isDumping: false })\r\n      return true;\r\n    } else {\r\n      alert('Failed to create the dump for this process: ' + processId);\r\n      this.setState({ isDumping: false })\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Others\r\n  private goHome: () => void = () => {\r\n    this.setState({\r\n      isShowMonitor: false,\r\n      isManageProfile: false,\r\n    });\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}