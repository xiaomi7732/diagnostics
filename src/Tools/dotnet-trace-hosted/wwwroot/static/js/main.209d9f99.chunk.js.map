{"version":3,"sources":["Models/CounterScores.ts","Models/ColorPalette.ts","Components/Processes.tsx","Components/TraceSessions.tsx","Components/TraceRepo.tsx","Components/ConnectingToBackend.tsx","Components/AppHeader.tsx","Components/ConnectionStatus.tsx","Components/ProfilePicker.tsx","Components/MonitorViz.tsx","Components/MonitorPage.tsx","Components/ProfileManager.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CounterScores","ColorPalette","Processes","handleRefresh","event","a","preventDefault","stopPropagation","props","refreshProcessAsync","content","len","undefined","this","processArray","length","dumpButtonClassName","isDumping","map","process","index","className","key","id","name","mainModule","type","value","onClick","startProfilingAsync","startMonitoringAsync","disabled","takeDumpAsync","Component","TraceSessions","list","traceSessions","session","processId","sessionId","stopProfilingAsync","stopMonitoringAsync","setAsSelected","defaultValue","loadTraceSessionsAsync","PureComponent","TraceRepo","fileArray","sort","b","fileName","file","fileFormat","toLowerCase","endsWith","fileSize","filesize","sizeInBytes","round","href","baseUrl","convertToSpeedscopeAsync","loadTraceFilesAsync","target","rel","ConnectingToBackend","handleConnectAsync","url","setState","errorMessage","isConnecting","connectToBackendAsync","handleAddBackend","e","newValue","newBackend","addBackend","newUrl","handleNewUrlChanged","state","backendUrlArray","removeBackend","onSubmit","htmlFor","placeholder","onChange","AppHeader","ConnectionStatus","disconnectBackend","ProfileViewer","getValidProfile","profileArray","filter","p","count","selectedProfile","onSelected","profile","description","manageProfile","onRefresh","MonitorViz","updateWindowDimensions","width","window","innerWidth","metricsNameComparer","name1","name2","getScore","fallBack","score","counterScore","startsWith","console","warn","addEventListener","removeEventListener","report","size","chartWidth","chartHeight","Array","from","keys","metricName","idxKey","reportItem","get","data","x","color","Object","style","display","flexFlow","height","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","stroke","dataKey","strokeDasharray","vertical","strokeWidth","wrapperStyle","backgroundColor","isAnimationActive","fillOpacity","fill","React","MonitorPage","onUpdate","metricValue","newReport","reportCache","has","array","pop","push","set","lastUpdate","Date","now","getTime","debug","forEach","v","k","Map","connection","signalR","withUrl","selectedEndpoint","build","on","start","catch","err","alert","counterHub","stop","exitMonitor","traceSessionArray","profilingSession","find","ProfileManager","_newProfileInputId","getId","_newProfileDescriptionId","handleNewProfileName","newProfileName","handleNewProfileDescription","newProfileDescription","handleNewProfileSubmit","addProfileAsync","providers","isShowNewProfileModel","refreshProfile","setManageProfile","profileDetails","effectiveProfileArray","profileList","p1","p2","title","checked","log","selected","Modal","isOpen","isBlocking","role","provider","parseInt","keywords","toString","eventLevel","filterData","App","BackendListKey","initializeAsync","Promise","all","loadProcessesAsync","loadProfilesAsync","selectProfile","isReady","getProcessesAsync","processes","fetch","response","ok","json","results","method","headers","body","JSON","stringify","result","getTraceSessionsAsync","setSelectedSession","selectedSession","newState","isShowMonitor","getReportAsync","setShowMonitoring","getTraceFilesAsync","files","traceFileArray","error","getList","includes","localStorage","setItem","item","isBackendReady","trim","substring","isManageProfile","selectedProfileForManage","getProfilesAsync","addNewProfileAsync","newProfile","isMini","dumpType","bind","urlListSerialized","getItem","parse","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.209d9f99.chunk.js","sourcesContent":["export enum CounterScores {\r\n    // CPU\r\n    'CPU Usage',\r\n    'Number of Active Timers',\r\n    'Exception Count',\r\n    'ThreadPool Thread Count',\r\n    'ThreadPool Queue Length',\r\n    'ThreadPool Completed Work Item Count',\r\n\r\n    // Memory\r\n    'Working Set',\r\n    'Allocation Rate',\r\n    'Number of Assemblies Loaded',\r\n\r\n    'GC Heap Size',\r\n    '% Time in GC since last GC',\r\n    'Gen 0 Size',\r\n    'Gen 0 GC Count',\r\n    'Gen 1 Size',\r\n    'Gen 1 GC Count',\r\n    'LOH Size',\r\n    'Gen 2 Size',\r\n    'Gen 2 GC Count',\r\n\r\n    // Requests\r\n    'Current Requests',\r\n    'Failed Requests',\r\n    'Total Requests',\r\n    'Request Rate',\r\n    'Monitor Lock Contention Count',\r\n}","export enum ColorPalette {\r\n    '#005697',\r\n    '#456990',\r\n    '#3F5E5A',\r\n    '#C52184',\r\n    '#5FAD41',\r\n    '#54F2F2',\r\n}","import React, { Component, ReactNode } from 'react';\r\nimport Process from '../Models/Process';\r\nimport './Processes.css';\r\n\r\ninterface ProcessesProps {\r\n    refreshProcessAsync: () => Promise<void>;\r\n    startProfilingAsync: (processId: number) => Promise<boolean>;\r\n    startMonitoringAsync: (processId: number) => Promise<boolean>;\r\n    takeDumpAsync: (processId: number, isMini: boolean) => Promise<boolean>;\r\n    isDumping: boolean;\r\n    processArray: Process[] | undefined;\r\n}\r\n\r\nexport default class Processes extends Component<ProcessesProps, {}>{\r\n    render(): ReactNode {\r\n        let content;\r\n        let len = 0;\r\n\r\n        if (this.props.processArray === undefined || this.props.processArray.length === 0) {\r\n            content = (<div>\r\n                There is no .NET Core processes.\r\n            </div>);\r\n        } else {\r\n            len = this.props.processArray.length;\r\n            const dumpButtonClassName: string = 'button' + (this.props.isDumping ? ' disabled' : '');\r\n            content = this.props.processArray.map((process: Process, index: number) => {\r\n                return (<div className='process-line' key={index}>\r\n                    <span className='process-id'>{process.id}</span> <span className='process-name'>{process.name}</span> <span className='process-path'>{process.mainModule}</span>\r\n                    <input className='button' type='button' value='&#x25B6; Start Profiling'\r\n                        onClick={() => {\r\n                            this.props.startProfilingAsync(process.id)\r\n                        }} />\r\n\r\n                    <input className='button' type='button' value='&#x25B6; Start Monitoring'\r\n                        onClick={() => {\r\n                            this.props.startMonitoringAsync(process.id);\r\n                        }} />\r\n\r\n                    <input className={dumpButtonClassName} type='button' value='&#128248; Mini Dump' disabled={this.props.isDumping}\r\n                        onClick={async () => {\r\n                            await this.props.takeDumpAsync(process.id, true)\r\n                        }} />\r\n                    <input className={dumpButtonClassName} type='button' value='&#128248; Heap Dump' disabled={this.props.isDumping}\r\n                        onClick={async () => {\r\n                            await this.props.takeDumpAsync(process.id, false)\r\n                        }} />\r\n                </div>)\r\n            });\r\n        }\r\n\r\n        return (<div className='processes'>\r\n            <div className='header'>\r\n                <h2>Remote Process ({len})</h2>\r\n                <input className='button header-button refresh-button' type='button' onClick={this.handleRefresh} value='&#x1f5d8;'></input>\r\n            </div>\r\n            {this.props.isDumping ? <div>Dump in progress . . .</div> : null}\r\n            {content}\r\n        </div>\r\n        );\r\n    }\r\n\r\n    private handleRefresh = async (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.props.refreshProcessAsync();\r\n    }\r\n}\r\n\r\n\r\n","import React, { PureComponent } from 'react';\r\nimport { TraceSession } from '../Models/TraceSession';\r\nimport './TraceSessions.css';\r\n\r\ninterface TraceSessionsProps {\r\n    setAsSelected: (session: TraceSession) => void;\r\n    loadTraceSessionsAsync: () => Promise<void>;\r\n    stopProfilingAsync: (processId: number, sessionId: number) => Promise<boolean>;\r\n    stopMonitoringAsync: (processId: number, sessionId: number) => Promise<boolean>;\r\n    traceSessions: TraceSession[] | undefined;\r\n}\r\n\r\nexport default class TraceSessions extends PureComponent<TraceSessionsProps, {}>{\r\n    render() {\r\n        let list;\r\n        let len: number = 0;\r\n\r\n        if (this.props.traceSessions === undefined || this.props.traceSessions.length === 0) {\r\n            list = <div>There's no trace sessions.</div>\r\n        }\r\n        else {\r\n            len = this.props.traceSessions.length;\r\n            list = <div className='session-container'>\r\n                {this.props.traceSessions.map((session, index) => {\r\n                    return (<div className='session-line' key={index}>\r\n                        <div className='process-id-part'>\r\n                            <span className='bold-text'>ProcessId:&nbsp;</span>\r\n                            <span>{session.processId}</span>\r\n                        </div>\r\n                        <div className='session-id-part'>\r\n                            <span className='bold-text'>SessionId:&nbsp;</span>\r\n                            <span>{session.sessionId}</span>\r\n                        </div>\r\n                        {session.type === 0 && <input className='button' type='button' value='&#x25A0; Stop Profiling' onClick={() => {\r\n                            this.props.stopProfilingAsync(session.processId, session.sessionId);\r\n                        }} />}\r\n                        {session.type === 1 && <input className='button' type='button' value='&#x25A0; Stop Monitoring' onClick={() => {\r\n                            this.props.stopMonitoringAsync(session.processId, session.sessionId);\r\n                        }} />}\r\n                        {session.type === 1 && <input className='button' type='button' value='&#x1F5E0; Visualize' onClick={() => {\r\n                            this.props.setAsSelected(session);\r\n                        }} />}\r\n                    </div>);\r\n                })}\r\n            </div>\r\n        }\r\n        return (<div className='trace-session'>\r\n            <div className='header'>\r\n                <h2>Remote Trace Sessions ({len})</h2>\r\n                <input className='button header-button' type='button' defaultValue='&#x1f5d8;' onClick={this.props.loadTraceSessionsAsync} />\r\n            </div>\r\n            {list}\r\n        </div>);\r\n    }\r\n}","import React, { PureComponent } from 'react';\r\nimport TraceFile from '../Models/TraceFile';\r\nimport * as filesize from 'filesize';\r\nimport './TraceRepo.css';\r\n\r\ninterface TraceRepoProps {\r\n    baseUrl: string;\r\n    loadTraceFilesAsync: () => Promise<void>;\r\n    convertToSpeedscopeAsync: (fileName: string) => Promise<boolean>;\r\n    fileArray: TraceFile[] | undefined;\r\n}\r\n\r\nexport default class TraceRepo extends PureComponent<TraceRepoProps, {}>{\r\n    render() {\r\n        let content;\r\n        let len: number = 0;\r\n        if (this.props.fileArray === undefined || this.props.fileArray.length === 0) {\r\n            content = <div>There's no trace file.</div>\r\n        } else {\r\n            len = this.props.fileArray.length;\r\n            content = <div>\r\n                {this.props.fileArray.sort((a, b) => {\r\n                    return a.fileName > b.fileName ? -1 : 1;\r\n                }).map((file, index) => {\r\n                    const fileFormat = file.fileName.toLowerCase().endsWith('.nettrace') ? 'nettrace' : 'speedscope';\r\n                    const fileSize = filesize.default(file.sizeInBytes, { round: 0 });\r\n                    return <div key={index} className='trace-file-line'>\r\n                        <div className='trace-file'>\r\n                            <a href={`${this.props.baseUrl}/TraceFiles/${file.fileName}`}>{file.fileName}</a>\r\n                        </div>\r\n                        <div className='trace-file-size'>\r\n                            {fileSize}\r\n                        </div>\r\n                        {(fileFormat === 'nettrace') && <input className='button' type='button' value='Get speedscope file' onClick={() => this.props.convertToSpeedscopeAsync(file.fileName)}></input>}\r\n                        {/* <input className='button' type='button' value='Upload to SP Backend' onClick={() => alert(`Not implemented: ${file.fileName}`)} /> */}\r\n                    </div>\r\n                })}\r\n            </div>\r\n        }\r\n        return (<div className='trace-repo'>\r\n            <div className='header'>\r\n                <h2>Remote Trace Files ({len})</h2>\r\n                <input className='button header-button' type='button' value='&#x1f5d8;' onClick={async () => await this.props.loadTraceFilesAsync()}></input>\r\n            </div>\r\n            <div className='speed-scope-tips'>\r\n                To open trace in <a href='https://speedscope.app' target='_blank' rel='noopener noreferrer'>speedscope</a>, download the <span>speedscope.json</span> files to your local box and upload it to <a href='https://speedscope.app' target='_blank' rel='noopener noreferrer'>speedscope.app</a>.\r\n            </div>\r\n            {content}\r\n        </div>)\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './ConnectingToBackend.css';\r\n\r\ninterface ConnectingToBackendProps {\r\n    backendUrlArray: string[] | undefined,\r\n    connectToBackendAsync: (url: string) => Promise<boolean>;\r\n    addBackend: (newUrl: string) => void;\r\n    removeBackend: (targetUrl: string) => void;\r\n}\r\n\r\ninterface ConnectingToBackendState {\r\n    errorMessage: string | undefined;\r\n    isConnecting: boolean;\r\n    newUrl: string;\r\n}\r\n\r\nexport default class ConnectingToBackend extends Component<ConnectingToBackendProps, ConnectingToBackendState>{\r\n    constructor(props: ConnectingToBackendProps) {\r\n        super(props);\r\n        this.state = {\r\n            errorMessage: undefined,\r\n            isConnecting: false,\r\n            newUrl: '',\r\n        };\r\n    }\r\n\r\n    render() {\r\n        let content;\r\n        if (this.props.backendUrlArray === undefined || this.props.backendUrlArray.length === 0) {\r\n            content = <div>Please add backend.</div>\r\n        } else {\r\n            content = this.props.backendUrlArray.map((url, index) => {\r\n                return <div className='backend-item-container' key={index}>\r\n                    <span className='backend-url' onClick={async () => {\r\n                        await this.handleConnectAsync(url);\r\n                    }}>{url}</span>\r\n                    <input className='button' type='button' value='Connect' onClick={async () => {\r\n                        await this.handleConnectAsync(url);\r\n                    }}></input>\r\n                    <input className='button' type='button' value='Remove' onClick={async () => {\r\n                        this.props.removeBackend(url);\r\n                    }}></input>\r\n                </div>\r\n            })\r\n        }\r\n\r\n        return (\r\n            <div className='connect-backend'>\r\n                <h2>Pick a backend</h2>\r\n                {content}\r\n                {!!this.state.isConnecting && <div>Connecting . . .</div>}\r\n                {!!this.state.errorMessage && <div>{this.state.errorMessage}</div>}\r\n\r\n                <h2>Adding new Backend</h2>\r\n                <div className='new-endpoint-container'>\r\n                    <form onSubmit={this.handleAddBackend}>\r\n                        <label htmlFor='newBackend'>Type in a new endpoint:</label>\r\n                        <input className='text-input' id='newBackend' type='textbox' placeholder='http://localhost:9400'\r\n                            value={this.state.newUrl} onChange={this.handleNewUrlChanged} />\r\n                        <div>\r\n                            <span className='tips'>Tips: Press enter to add the endpoint.</span>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleConnectAsync = async (url: string) => {\r\n        this.setState({\r\n            errorMessage: '',\r\n            isConnecting: true,\r\n        });\r\n        const result = await this.props.connectToBackendAsync(url);\r\n        if (!result) {\r\n            this.setState({\r\n                errorMessage: `Failed to connecting to backend: ${url}.`,\r\n                isConnecting: false,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleAddBackend = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        const target = e.target as any;\r\n        const newValue = target.newBackend.value;\r\n        if (!!newValue) {\r\n            this.props.addBackend(newValue);\r\n            this.setState({\r\n                newUrl: ''\r\n            });\r\n        }\r\n    }\r\n\r\n    handleNewUrlChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            newUrl: e.target.value,\r\n        });\r\n    }\r\n}","import React from 'react';\r\nexport const AppHeader = () => (\r\n    <div className='app-header'>\r\n        <h1>.NET Core Profiling Console</h1>\r\n    </div>\r\n);","import React from 'react';\r\n\r\ninterface ConnectionStatusProps {\r\n    baseUrl: string;\r\n\r\n    disconnectBackend: () => void;\r\n}\r\n\r\nexport const ConnectionStatus = (props: ConnectionStatusProps) => (\r\n    <div className='connection-status'>\r\n        <h2>Connection</h2>\r\n        <span>&#x1f5a7; You are connecting to: {props.baseUrl}</span>\r\n        <input className='button' type='button' onClick={props.disconnectBackend} value='Disconnect'></input>\r\n    </div>\r\n);","import React, { PureComponent } from 'react';\r\nimport { Profile } from '../Models/Profile';\r\nimport './ProfilePicker.css';\r\n\r\ninterface ProfileViewerProps {\r\n    profileArray: Profile[] | undefined;\r\n    selectedProfile: string | undefined;\r\n    onSelected: (newValue: string) => void;\r\n    onRefresh: () => void;\r\n    manageProfile: () => void;\r\n}\r\n\r\nexport default class ProfileViewer extends PureComponent<ProfileViewerProps, any> {\r\n    render() {\r\n        let count = 0;\r\n        let content;\r\n        const profileArray = this.getValidProfile();\r\n\r\n        if (profileArray !== undefined) {\r\n            count = profileArray.length;\r\n            content = (<div className='ProfileListContainer'>\r\n                <select value={this.props.selectedProfile} onChange={e => {\r\n                    const target = e.target as any;\r\n                    if (!!target && !!target.value) {\r\n                        this.props.onSelected(target.value);\r\n                    }\r\n                }}>\r\n                    {\r\n                        profileArray.sort((a, b) => a > b ? 1 : -1).map((profile) => {\r\n                            return <option key={profile.name} value={profile.name}>{profile.name}: {profile.description}</option>;\r\n                        })\r\n                    }</select>\r\n                <input type='button' className='button' value='Manage ...' onClick={this.props.manageProfile} />\r\n            </div>);\r\n        } else {\r\n            content = \"No tracing profile exist.\"\r\n        }\r\n        return <div className='profile-picker'>\r\n            <div className='header'>\r\n                <h2>Tracing Profiles ({count})</h2>\r\n                <input className='button header-button refresh-button' type='button' onClick={this.props.onRefresh} value='&#x1f5d8;'></input>\r\n            </div>\r\n            {content}\r\n        </div>\r\n    }\r\n\r\n    getValidProfile: () => Profile[] | undefined = () => {\r\n        if (this.props.profileArray === undefined) {\r\n            return undefined;\r\n        }\r\n        return this.props.profileArray.filter(p => p.name !== 'none');\r\n    }\r\n}","import React from 'react';\r\nimport { AreaChart, YAxis, XAxis, CartesianGrid, Area, Tooltip } from 'recharts';\r\nimport './MonitorViz.css';\r\nimport { CounterScores } from '../Models/CounterScores';\r\nimport { ColorPalette } from '../Models/ColorPalette';\r\n\r\ninterface MonitorVizProps {\r\n    report: Map<string, number[]>;\r\n}\r\n\r\ninterface MonitorVizState {\r\n    width: number;\r\n}\r\n\r\nexport default class MonitorViz extends React.Component<MonitorVizProps, MonitorVizState> {\r\n    constructor(props: MonitorVizProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            width: 0,\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    render() {\r\n        const { width } = this.state;\r\n        const { report } = this.props;\r\n        let content;\r\n        if (report === undefined || report.size === 0) {\r\n            content = <div className='data-loading-message'>Visualization data not available.</div>\r\n        } else {\r\n            let chartWidth = width < 600 ? width - 24 : width / 3 - 8;\r\n            if (chartWidth < 300) {\r\n                chartWidth = 300;\r\n            }\r\n            let chartHeight = chartWidth * 2 / 4;\r\n            if (chartHeight < 200) {\r\n                chartHeight = 200;\r\n            }\r\n\r\n            content = <>{\r\n                Array.from(report.keys()).sort(this.metricsNameComparer).map((metricName, idxKey) => {\r\n                    const reportItem = report.get(metricName);\r\n                    if (reportItem !== undefined) {\r\n                        const data = reportItem.map((value, index) => { return { key: metricName, value: value, x: index } }) as ReadonlyArray<object>;\r\n                        const color = ColorPalette[idxKey % (Object.keys(ColorPalette).length / 2)];\r\n\r\n                        return <div key={idxKey} style={{ display: 'flex', flexFlow: 'column' }} >\r\n                            <h4 className='chart-title'>{metricName}</h4>\r\n                            <AreaChart\r\n                                width={chartWidth}\r\n                                height={chartHeight}\r\n                                data={data}\r\n                                margin={{ top: 5, right: 20, left: 10, bottom: 5 }}\r\n                            >\r\n                                <defs>\r\n                                    <linearGradient id={color} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                        <stop offset=\"5%\" stopColor={color} stopOpacity={0.6} />\r\n                                        <stop offset=\"95%\" stopColor={color} stopOpacity={.2} />\r\n                                    </linearGradient>\r\n                                </defs>\r\n                                <XAxis stroke='white' dataKey='x' type='number' />\r\n                                <YAxis stroke='white' type='number' />\r\n                                <CartesianGrid strokeDasharray=\"5 2\" vertical={false} strokeWidth='1' stroke='#888888' />\r\n                                <Tooltip wrapperStyle={{ color: 'blue', backgroundColor: 'red' }} isAnimationActive={false} />\r\n                                <Area type=\"monotone\" dataKey=\"value\" strokeWidth={2} stroke={color} fillOpacity={1} fill={\"url(#\" + color + \")\"}\r\n                                    isAnimationActive={false}>\r\n                                </Area>\r\n                            </AreaChart>\r\n                        </div>\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                })\r\n            }\r\n            </>\r\n        }\r\n\r\n        return <div className='monitor-viz'>\r\n            {content}\r\n        </div>;\r\n    }\r\n\r\n    private updateWindowDimensions = () => {\r\n        this.setState({ width: window.innerWidth });\r\n    }\r\n\r\n    private metricsNameComparer: (name1: string, name2: string) => number = (name1, name2) => {\r\n        const fallback = 1000000;\r\n        const n1Score = this.getScore(name1, fallback);\r\n        const n2Score = this.getScore(name2, fallback);\r\n        return n1Score - n2Score;\r\n    }\r\n\r\n    private getScore: (name: string, fallBack: number) => number = (name, fallBack) => {\r\n        let score = fallBack;\r\n        if (name === null || name === undefined) {\r\n            return fallBack;\r\n        }\r\n        for (let counterScore in CounterScores) {\r\n            if (name.startsWith(counterScore)) {\r\n                score = +CounterScores[counterScore];\r\n                break;\r\n            }\r\n        }\r\n        if (score === fallBack) {\r\n            console.warn(name + ' is an unknown metrics.');\r\n        }\r\n        return score;\r\n    }\r\n}","import * as React from 'react';\r\nimport MonitorViz from './MonitorViz';\r\nimport './MonitorPage.css';\r\nimport { TraceSession } from '../Models/TraceSession';\r\nimport * as signalR from \"@aspnet/signalr\";\r\n\r\ninterface MonitorPageProps {\r\n    processId: number;\r\n    sessionId: number;\r\n    isDumping: boolean;\r\n    traceSessionArray: TraceSession[] | undefined;\r\n    selectedEndpoint: string;\r\n\r\n    exitMonitor: () => void;\r\n    takeDumpAsync: (processId: number, isMini: boolean) => Promise<any>;\r\n    startProfilingAsync: (processId: number) => Promise<boolean>;\r\n    stopProfilingAsync: (processId: number, sessionId: number) => Promise<boolean>;\r\n}\r\n\r\ninterface MonitorPageStates {\r\n    report: Map<string, number[]>;\r\n    counterHub: signalR.HubConnection | null;\r\n}\r\n\r\nclass MonitorPage extends React.Component<MonitorPageProps, MonitorPageStates> {\r\n    constructor(props: MonitorPageProps) {\r\n        super(props);\r\n\r\n\r\n        let connection: signalR.HubConnection | null = new signalR.HubConnectionBuilder()\r\n            .withUrl(`${this.props.selectedEndpoint}/counterHub`)\r\n            .build();\r\n\r\n        connection.on(\"updateCounterAsync\", this.onUpdate);\r\n\r\n        connection.start().catch(err => { alert(err); connection = null; });\r\n\r\n        this.state = {\r\n            report: new Map(),\r\n            counterHub: connection,\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if(this.state.counterHub!==null){\r\n            this.state.counterHub.stop();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { processId,\r\n            sessionId,\r\n            exitMonitor,\r\n            takeDumpAsync,\r\n            isDumping,\r\n            traceSessionArray,\r\n            startProfilingAsync,\r\n            stopProfilingAsync,\r\n        } = this.props;\r\n\r\n        const dumpButtonClassName: string = 'button' + (isDumping ? ' disabled' : '');\r\n        const profilingSession = traceSessionArray === undefined ? undefined :\r\n            traceSessionArray.find(session => session.processId === processId && session.processId !== sessionId && session.type === 0);\r\n        return <div className='monitor-page'>\r\n            <div className='header'>\r\n                <h2>Monitoring</h2>\r\n                <h3>Session: {sessionId} Process: {processId}</h3>\r\n\r\n                <input type='button' value='Heap Dump' className={dumpButtonClassName} onClick={async () => await takeDumpAsync(processId, false)}\r\n                    disabled={isDumping} />\r\n                <input type='button' value='Mini Dump' className={dumpButtonClassName} onClick={async () => await takeDumpAsync(processId, true)}\r\n                    disabled={isDumping} />\r\n\r\n                {!!profilingSession &&\r\n                    <input type='button' value='Stop Profiling' className={dumpButtonClassName} onClick={async () => {\r\n                        if (profilingSession !== undefined) {\r\n                            await stopProfilingAsync(profilingSession.processId, profilingSession.sessionId);\r\n                        }\r\n                    }}\r\n                    />}\r\n                {!profilingSession &&\r\n                    <input type='button' value='Start Profiling' className={dumpButtonClassName} onClick={async () => {\r\n                        await startProfilingAsync(processId);\r\n                    }}\r\n                    />}\r\n                <input type='button' value='Back' className='button' onClick={exitMonitor} />\r\n            </div>\r\n            <div className='viz'>\r\n                <MonitorViz report={this.state.report} />\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    private onUpdate:\r\n        (processId: number, sessionId: number, metricName: string, metricValue: number) => void\r\n        = (processId, sessionId, metricName, metricValue) => {\r\n            if (processId === this.props.processId && sessionId === this.props.sessionId) {\r\n                const newReport = this.reportCache;\r\n                if (newReport.has(metricName)) {\r\n                    // Exists\r\n                    const array = newReport.get(metricName);\r\n                    if (array != null) {\r\n                        while (array.length >= 60) {\r\n                            array.pop();\r\n                        }\r\n                        array.push(metricValue);\r\n                        newReport.set(metricName, array);\r\n                    }\r\n                } else {\r\n                    // Doesn't exist\r\n                    newReport.set(metricName, [metricValue]);\r\n                }\r\n\r\n                // Update no frequent than 1 second.\r\n                this.reportCache = newReport;\r\n                if (this.lastUpdate === undefined) {\r\n                    this.lastUpdate = new Date();\r\n                    this.setState({\r\n                        report: newReport,\r\n                    });\r\n                } else {\r\n                    const now = new Date();\r\n                    const delta = now.getTime() - this.lastUpdate.getTime();\r\n                    if (delta >= 500) {\r\n                        this.lastUpdate = now;\r\n\r\n                        console.debug('Report:');\r\n                        newReport.forEach((v, k) => {\r\n                            console.debug(`${k}:${v.length}`);\r\n                        });\r\n\r\n                        this.setState({\r\n                            report: newReport\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    private reportCache: Map<string, number[]> = new Map();\r\n    private lastUpdate: Date | undefined = undefined;\r\n}\r\n\r\nexport default MonitorPage;","import React, { ChangeEvent, FormEvent } from 'react';\r\nimport { Profile } from '../Models/Profile';\r\nimport { Modal } from 'office-ui-fabric-react/lib/Modal';\r\nimport './ProfileManager.css';\r\nimport { getId } from '@uifabric/utilities';\r\n\r\ninterface IProfileManagerProps {\r\n    profileArray: Profile[] | undefined;\r\n    selectedProfile: Profile | undefined;\r\n\r\n    setManageProfile: (value: Profile | undefined) => void;\r\n    addProfileAsync: (newProfile: Profile) => Promise<Profile>;\r\n    refreshProfile: () => void;\r\n}\r\n\r\ninterface IProfileManagerState {\r\n    isShowNewProfileModel: boolean;\r\n    newProfileName: string;\r\n    newProfileDescription: string;\r\n}\r\n\r\nexport class ProfileManager extends React.Component<IProfileManagerProps, IProfileManagerState> {\r\n    private readonly _newProfileInputId = getId('_newProfileInputId');\r\n    private readonly _newProfileDescriptionId = getId('_newProfileDescriptionId');\r\n\r\n    constructor(props: IProfileManagerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isShowNewProfileModel: false,\r\n            newProfileName: '',\r\n            newProfileDescription: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!!this.props.profileArray && this.props.profileArray.length > 0 && !this.props.selectedProfile) {\r\n            this.props.setManageProfile(this.props.profileArray[0]);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { profileArray, selectedProfile } = this.props;\r\n        const effectiveProfileArray = profileArray === undefined ? undefined : profileArray.filter(p => p.name !== 'none');\r\n\r\n        let profileList = null;\r\n        if (effectiveProfileArray !== undefined) {\r\n            profileList = effectiveProfileArray.sort((p1, p2) => {\r\n                if (p1.name > p2.name) return 1;\r\n                return -1;\r\n            }).map((profile, index) => {\r\n                return <div className='ProfileNameRadioButton' key={index} title={profile.name}>\r\n                    <input type='radio'\r\n                        name='profileName'\r\n                        value={profile.name}\r\n                        checked={!!selectedProfile && selectedProfile.name === profile.name}\r\n                        onChange={e => {\r\n                            console.log(e.target.value);\r\n                            if (!!e.target && !!e.target.value) {\r\n                                const selected = effectiveProfileArray.find(p => p.name === e.target.value)\r\n                                this.props.setManageProfile(selected);\r\n                            }\r\n                        }}\r\n                    />{profile.name}\r\n                </div>;\r\n            });\r\n            profileList = <div>\r\n                {profileList}\r\n                <Modal\r\n                    isOpen={this.state.isShowNewProfileModel}\r\n                    isBlocking={true}>\r\n                    <div className='dialog-container dark-theme'>\r\n                        <div className='title-container'>Add a Profile</div>\r\n                        <div className='content-container' role='presentation'>\r\n                            <form onSubmit={this.handleNewProfileSubmit}>\r\n                                <div role='presentation'>\r\n                                    <label htmlFor={this._newProfileInputId}>Profile Name:</label>\r\n                                    <input id={this._newProfileInputId} type='input' value={this.state.newProfileName} onChange={this.handleNewProfileName}\r\n                                        placeholder='New profile name.'></input>\r\n                                </div>\r\n                                <div role='presentation'>\r\n                                    <label htmlFor={this._newProfileDescriptionId}>Description:</label>\r\n                                    <input id={this._newProfileDescriptionId} type='input' value={this.state.newProfileDescription} onChange={this.handleNewProfileDescription}\r\n                                        placeholder='Description of the Profile.'></input>\r\n                                </div>\r\n                                <div className='button-section'>\r\n                                    <input type='submit' className='button' value='Submit' />\r\n                                    <input type='button' className='button' value='Cancel' onClick={() => {\r\n                                        this.setState({\r\n                                            isShowNewProfileModel: false,\r\n                                            newProfileName: '',\r\n                                        });\r\n                                    }} />\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n        } else {\r\n            profileList = <div>No profile.</div>\r\n        }\r\n\r\n        let profileDetails;\r\n        if (!!selectedProfile) {\r\n            profileDetails = <>\r\n                <h2>\r\n                    Profile: {selectedProfile.name}\r\n                </h2>\r\n                <div>{selectedProfile.description}</div>\r\n                <h3>Providers</h3>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Keywords</th>\r\n                            <th>EventLevel</th>\r\n                            <th>Filter</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {selectedProfile.providers.map((provider, index) => {\r\n                            return <tr key={index}>\r\n                                <td>{provider.name}</td>\r\n                                <td>0x{parseInt(provider.keywords).toString(16)}</td>\r\n                                <td>{provider.eventLevel}</td>\r\n                                <td>{provider.filterData}</td>\r\n                            </tr>;\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        } else {\r\n            profileDetails = <div>Select or create a profile first.</div>\r\n        }\r\n\r\n        return <div className='ProfileManager'>\r\n            <div className='ProfileList'>\r\n                <div className='HeaderContainer'>\r\n                    <h2>Pick a Profile</h2>\r\n                    &nbsp;(<div className='AddRemoveButton' onClick={() => this.setState({ isShowNewProfileModel: true })}>+</div>/<div>-</div>)\r\n                </div>\r\n                {profileList}\r\n            </div>\r\n            <div className='ProfileDetails'>\r\n                {profileDetails}\r\n            </div>\r\n\r\n        </div>\r\n    }\r\n\r\n    private handleNewProfileName: ((event: ChangeEvent<HTMLInputElement>) => void) | undefined = (event) => {\r\n        this.setState({\r\n            newProfileName: event.target.value,\r\n        });\r\n    }\r\n\r\n    private handleNewProfileDescription: ((event: ChangeEvent<HTMLInputElement>) => void) | undefined = (event) => {\r\n        this.setState({\r\n            newProfileDescription: event.target.value,\r\n        });\r\n    }\r\n\r\n    private handleNewProfileSubmit: ((event: FormEvent<HTMLFormElement>) => void) | undefined = async (event) => {\r\n        event.preventDefault();\r\n        const result = await this.props.addProfileAsync({\r\n            name: this.state.newProfileName,\r\n            description: this.state.newProfileDescription,\r\n            providers: []\r\n        });\r\n\r\n        if (result !== null) {\r\n            this.setState({\r\n                isShowNewProfileModel: false,\r\n                newProfileDescription: '',\r\n                newProfileName: '',\r\n            });\r\n            this.props.refreshProfile();\r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport './Components/Processes'\r\nimport Process from './Models/Process';\r\nimport { TraceSession } from './Models/TraceSession';\r\n\r\nimport Processes from './Components/Processes';\r\nimport TraceSessions from './Components/TraceSessions';\r\nimport TraceFile from './Models/TraceFile';\r\nimport TraceRepo from './Components/TraceRepo';\r\nimport ConnectingToBackend from './Components/ConnectingToBackend';\r\nimport { AppHeader } from './Components/AppHeader';\r\nimport { ConnectionStatus } from './Components/ConnectionStatus';\r\nimport { Profile } from './Models/Profile';\r\nimport ProfilePicker from './Components/ProfilePicker';\r\nimport { MonitorReport } from './Models/MonitorReport';\r\nimport MonitorPage from './Components/MonitorPage';\r\nimport { ProfileManager } from './Components/ProfileManager';\r\n\r\ninterface AppState {\r\n  processArray: Process[] | undefined;\r\n  traceSessionArray: TraceSession[] | undefined;\r\n  traceFileArray: TraceFile[] | undefined;\r\n  isReady: boolean;\r\n  isBackendReady: boolean;\r\n  backendUrlArray: string[];\r\n  baseUrl: string;\r\n  profileArray: Profile[] | undefined;\r\n  selectedProfile: string | undefined;\r\n  isDumping: boolean;\r\n  selectedSession: undefined | TraceSession;\r\n  isShowMonitor: boolean;\r\n  isManageProfile: boolean;\r\n  selectedProfileForManage: Profile | undefined;\r\n}\r\n\r\nexport default class App extends Component<any, AppState>{\r\n  readonly BackendListKey: string = 'backendList';\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    // Initial state\r\n    this.state = {\r\n      processArray: undefined,\r\n      traceSessionArray: undefined,\r\n      traceFileArray: undefined,\r\n      isReady: false,\r\n      isBackendReady: false,\r\n      backendUrlArray: this.getList(),\r\n      baseUrl: '',\r\n      profileArray: undefined,\r\n      selectedProfile: undefined,\r\n      selectedProfileForManage: undefined,\r\n      isDumping: false,\r\n      selectedSession: undefined,\r\n      isShowMonitor: false,\r\n      isManageProfile: false,\r\n    };\r\n  }\r\n  render() {\r\n    let content;\r\n\r\n    if (!this.state.isBackendReady) {\r\n      content = <ConnectingToBackend\r\n        backendUrlArray={this.state.backendUrlArray}\r\n        addBackend={this.addBackend}\r\n        removeBackend={this.removeBackend}\r\n        connectToBackendAsync={this.connectToBackendAsync}\r\n      />;\r\n    } else {\r\n      const { isShowMonitor, selectedSession, isManageProfile, profileArray } = this.state;\r\n      if (!this.state.isReady) {\r\n        return null;\r\n      }\r\n\r\n      if (isShowMonitor && selectedSession !== undefined) {\r\n        content = <MonitorPage\r\n          selectedEndpoint={this.state.baseUrl}\r\n          traceSessionArray={this.state.traceSessionArray}\r\n          isDumping={this.state.isDumping}\r\n          processId={selectedSession.processId}\r\n          sessionId={selectedSession.sessionId}\r\n          exitMonitor={() => { this.setShowMonitoring(false); }}\r\n          takeDumpAsync={this.takeDumpAsync.bind(this)}\r\n          startProfilingAsync={this.startProfilingAsync}\r\n          stopProfilingAsync={this.stopProfilingAsync}\r\n        />\r\n      }\r\n      else if (isManageProfile) {\r\n        content = <ProfileManager\r\n          profileArray={profileArray}\r\n          selectedProfile={this.state.selectedProfileForManage}\r\n          setManageProfile={this.setManageProfile}\r\n          addProfileAsync={this.addNewProfileAsync}\r\n          refreshProfile={this.loadProfilesAsync}\r\n        ></ProfileManager>\r\n      } else {\r\n        content = <>\r\n          <div className='section'>\r\n            <ConnectionStatus baseUrl={this.state.baseUrl}\r\n              disconnectBackend={this.disconnectBackend}\r\n            />\r\n            <ProfilePicker\r\n              manageProfile={() => this.manageProfile(true)}\r\n              profileArray={this.state.profileArray}\r\n              onSelected={this.selectProfile}\r\n              selectedProfile={this.state.selectedProfile}\r\n              onRefresh={this.loadProfilesAsync}\r\n            />\r\n            <Processes\r\n              refreshProcessAsync={this.loadProcessesAsync}\r\n              startProfilingAsync={this.startProfilingAsync}\r\n              startMonitoringAsync={this.startMonitoringAsync}\r\n              takeDumpAsync={this.takeDumpAsync}\r\n              processArray={this.state.processArray}\r\n              isDumping={this.state.isDumping}\r\n            />\r\n            <TraceSessions\r\n              traceSessions={this.state.traceSessionArray}\r\n              stopProfilingAsync={this.stopProfilingAsync}\r\n              stopMonitoringAsync={this.stopMonitoringAsync}\r\n              loadTraceSessionsAsync={this.loadTraceSessionsAsync}\r\n              setAsSelected={this.setSelectedSession} />\r\n            <TraceRepo\r\n              baseUrl={this.state.baseUrl}\r\n              loadTraceFilesAsync={this.loadTraceFilesAsync}\r\n              convertToSpeedscopeAsync={this.convertToSpeedscopeAsync}\r\n              fileArray={this.state.traceFileArray}\r\n            />\r\n          </div>\r\n        </>;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className='dark-theme'>\r\n        <AppHeader />\r\n        <div className='app-container'>\r\n          {content}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private initializeAsync: () => Promise<any> = async () => {\r\n    await Promise.all([\r\n      this.loadProcessesAsync(),\r\n      this.loadTraceSessionsAsync(),\r\n      this.loadTraceFilesAsync(),\r\n      this.loadProfilesAsync(),\r\n    ]);\r\n\r\n    this.selectProfile('runtime-basic');\r\n\r\n    this.setState({\r\n      isReady: true,\r\n    });\r\n  }\r\n\r\n  // Processes\r\n  private loadProcessesAsync: () => Promise<void> = async () => {\r\n    try {\r\n      const processes = await this.getProcessesAsync();\r\n      this.setState({\r\n        processArray: processes,\r\n      });\r\n    } catch (ex) {\r\n      this.setState({\r\n        processArray: undefined,\r\n      });\r\n    }\r\n  }\r\n  private getProcessesAsync: () => Promise<Process[]> = async () => {\r\n    const response = await fetch(`${this.state.baseUrl}/processes`);\r\n    if (!!response && response.ok) {\r\n      const results: Process[] = await response.json();\r\n      return results;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  // Traces\r\n  private startProfilingAsync: (processId: number) => Promise<boolean> = async (processId: number) => {\r\n    const response = await fetch(`${this.state.baseUrl}/traces`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        processId: processId,\r\n        profile: this.state.selectedProfile,\r\n      }),\r\n    });\r\n\r\n    const result = !!response && response.ok;\r\n    if (result) {\r\n      await this.loadTraceSessionsAsync();\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private stopProfilingAsync: (processId: number, sessionId: number) => Promise<boolean> = async (processId: number, sessionId: number) => {\r\n    const response = await fetch(`${this.state.baseUrl}/traces/${processId}?sessionId=${sessionId}`, {\r\n      method: 'DELETE',\r\n    });\r\n\r\n    const result = !!response && response.ok;\r\n    if (result) {\r\n      await Promise.all([this.loadTraceSessionsAsync(), this.loadTraceFilesAsync()]);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Monitoring\r\n  private startMonitoringAsync: (processId: number) => Promise<boolean> = async (processId) => {\r\n    const response = await fetch(`${this.state.baseUrl}/monitors`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        processId\r\n      }),\r\n    });\r\n\r\n    const result = !!response && response.ok;\r\n    if (result) {\r\n      await this.loadTraceSessionsAsync();\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private stopMonitoringAsync: (processId: number, sessionId: number) => Promise<boolean> = async (processId, sessionId) => {\r\n    const response = await fetch(`${this.state.baseUrl}/monitors`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        processId,\r\n        id: sessionId,\r\n      }),\r\n    });\r\n\r\n    const result = !!response && response.ok;\r\n    if (result) {\r\n      await this.loadTraceSessionsAsync();\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Sessions\r\n  private loadTraceSessionsAsync: () => Promise<void> = async () => {\r\n    try {\r\n      const traceSessions = await this.getTraceSessionsAsync();\r\n      this.setState({\r\n        traceSessionArray: traceSessions,\r\n      });\r\n    } catch{\r\n      this.setState({\r\n        traceSessionArray: undefined,\r\n      });\r\n    }\r\n  }\r\n\r\n  private getTraceSessionsAsync: () => Promise<TraceSession[]> = async () => {\r\n    const response = await fetch(`${this.state.baseUrl}/sessions`);\r\n    if (!!response && response.ok) {\r\n      const result: TraceSession[] = await response.json();\r\n      return result;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private setSelectedSession: (traceSession: TraceSession | undefined) => void = (selectedSession) => {\r\n    const newState: Partial<AppState> = {\r\n      selectedSession\r\n    };\r\n    if (selectedSession === undefined) {\r\n      newState.isShowMonitor = false;\r\n    } else if (!this.state.isShowMonitor) {\r\n      newState.isShowMonitor = true;\r\n    }\r\n    this.setState(newState as AppState);\r\n  }\r\n\r\n  private getReportAsync: () => Promise<MonitorReport | undefined> = async () => {\r\n    const { selectedSession } = this.state;\r\n    if (selectedSession === undefined) {\r\n      return undefined;\r\n    }\r\n    const response = await fetch(`${this.state.baseUrl}/Monitors/${selectedSession.processId}/${selectedSession.sessionId}`);\r\n    if (!!response && response.ok) {\r\n      const result: MonitorReport = await response.json();\r\n      return result;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  private setShowMonitoring: (value: boolean) => void = (value) => {\r\n    this.setState({\r\n      isShowMonitor: value,\r\n    });\r\n  }\r\n\r\n  // Repository\r\n  private loadTraceFilesAsync: () => Promise<void> = async () => {\r\n    try {\r\n      const files = await this.getTraceFilesAsync();\r\n      this.setState({\r\n        traceFileArray: files,\r\n      });\r\n    } catch{\r\n      this.setState({\r\n        traceFileArray: undefined,\r\n      });\r\n    }\r\n  }\r\n\r\n  private getTraceFilesAsync: () => Promise<TraceFile[]> = async () => {\r\n    const response = await fetch(`${this.state.baseUrl}/traceFiles`);\r\n    if (!!response && response.ok) {\r\n      const result: TraceFile[] = await response.json();\r\n      return result;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private convertToSpeedscopeAsync: (fileName: string) => Promise<boolean> = async (fileName) => {\r\n    const response = await fetch(`${this.state.baseUrl}/traceFiles`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        fileName,\r\n      }),\r\n    });\r\n    if (!!response && response.ok) {\r\n      await this.loadTraceFilesAsync();\r\n      return true;\r\n    } else {\r\n      const error = await response.json();\r\n\r\n      alert('Converting failed.' + !!error.error ? ' Details: ' + error.error : '');\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Backend\r\n  private addBackend: (url: string) => void = (url: string) => {\r\n    url = url.toLowerCase();\r\n    const list = this.getList();\r\n    if (!list.includes(url)) {\r\n      list.push(url);\r\n    }\r\n    localStorage.setItem(this.BackendListKey, JSON.stringify(list));\r\n    this.setState({\r\n      backendUrlArray: list\r\n    });\r\n  }\r\n\r\n  private removeBackend: (url: string) => void = (url: string): void => {\r\n    url = url.toLowerCase();\r\n    let list = this.getList();\r\n    list = list.filter(item => item !== url);\r\n    localStorage.setItem(this.BackendListKey, JSON.stringify(list));\r\n    this.setState({\r\n      backendUrlArray: list\r\n    });\r\n  }\r\n\r\n  private getList(): string[] {\r\n    const urlListSerialized: string | null = localStorage.getItem(this.BackendListKey);\r\n    let list: string[];\r\n    if (urlListSerialized === null || urlListSerialized === '' || urlListSerialized === '[]') {\r\n      list = ['http://localhost:9400'];\r\n    } else {\r\n      list = JSON.parse(urlListSerialized);\r\n    }\r\n    return list;\r\n  }\r\n\r\n  private disconnectBackend: () => void = () => {\r\n    this.setState({\r\n      baseUrl: '',\r\n      isReady: false,\r\n      isBackendReady: false,\r\n    });\r\n  }\r\n\r\n  private connectToBackendAsync: (url: string) => Promise<boolean> = async (url: string) => {\r\n    try {\r\n      url = url.trim();\r\n      if (!url.startsWith('http') && !url.startsWith('https')) {\r\n        return false;\r\n      }\r\n      if (url.endsWith('/')) {\r\n        url = url.substring(0, url.length - 1);\r\n      }\r\n      const response = await fetch(url + '/processes');\r\n      if (!!response && response.ok) {\r\n        this.setState({\r\n          isBackendReady: true,\r\n          baseUrl: url,\r\n        });\r\n        await this.initializeAsync();\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Profiles\r\n  private manageProfile: (value: boolean) => void = (value) => {\r\n    this.setState({\r\n      isManageProfile: value,\r\n    });\r\n  }\r\n\r\n  private setManageProfile: (value: Profile | undefined) => void = (value) => {\r\n    this.setState({\r\n      selectedProfileForManage: value,\r\n    });\r\n  }\r\n\r\n  private loadProfilesAsync: () => void = async () => {\r\n    const result = await this.getProfilesAsync();\r\n    if (result.length > 0) {\r\n      this.setState({\r\n        profileArray: result,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        profileArray: undefined,\r\n      });\r\n    }\r\n  }\r\n\r\n  private getProfilesAsync: () => Promise<Profile[]> = async () => {\r\n    const response = await fetch(`${this.state.baseUrl}/profiles`);\r\n    if (!!response && response.ok) {\r\n      const result: Profile[] = await response.json();\r\n      return result;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private selectProfile: (newValue: string) => void = (newValue: string) => {\r\n    this.setState({\r\n      selectedProfile: newValue\r\n    });\r\n  }\r\n\r\n  private addNewProfileAsync: (newProfile: Profile) => Promise<Profile> = async (newProfile) => {\r\n    const response = await fetch(`${this.state.baseUrl}/profiles`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(newProfile),\r\n    });\r\n    if (!!response && response.ok) {\r\n      return response.json();\r\n    } else {\r\n      const error = await response.json();\r\n      alert(error);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Dumps\r\n  private takeDumpAsync: (processId: number, isMini: boolean) => Promise<any> = async (processId, isMini) => {\r\n    this.setState({\r\n      isDumping: true,\r\n    });\r\n    const DUMP_TYPE_HEAP = 0;\r\n    const DUMP_TYPE_MINI = 1;\r\n    const dumpType = isMini ? DUMP_TYPE_MINI : DUMP_TYPE_HEAP;\r\n    const response = await fetch(`${this.state.baseUrl}/dumps`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        processId,\r\n        dumpType,\r\n      }),\r\n    });\r\n    if (!!response && response.ok) {\r\n      await this.loadTraceFilesAsync();\r\n      alert('Dump crated for process ' + processId);\r\n      this.setState({ isDumping: false })\r\n      return true;\r\n    } else {\r\n      alert('Failed to create the dump for this process: ' + processId);\r\n      this.setState({ isDumping: false })\r\n    }\r\n    return false;\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}