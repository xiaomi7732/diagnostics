{"version":3,"sources":["Models/CounterScores.ts","Models/ColorPalette.ts","Components/Processes.tsx","Components/TraceSessions.tsx","Components/TraceRepo.tsx","Components/ConnectingToBackend.tsx","Components/AppHeader.tsx","Components/ConnectionStatus.tsx","Components/ProfilePicker.tsx","Components/MonitorViz.tsx","Components/MonitorPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CounterScores","ColorPalette","Processes","handleRefresh","event","a","preventDefault","stopPropagation","props","refreshProcessAsync","content","len","undefined","this","processArray","length","dumpButtonClassName","isDumping","map","process","index","className","key","id","name","mainModule","type","value","onClick","startProfilingAsync","startMonitoringAsync","disabled","takeDumpAsync","Component","TraceSessions","list","traceSessions","session","processId","sessionId","stopProfilingAsync","stopMonitoringAsync","setAsSelected","defaultValue","loadTraceSessionsAsync","PureComponent","TraceRepo","fileArray","sort","b","fileName","file","fileFormat","toLowerCase","endsWith","fileSize","filesize","sizeInBytes","round","href","baseUrl","convertToSpeedscopeAsync","loadTraceFilesAsync","target","rel","ConnectingToBackend","handleConnectAsync","url","setState","errorMessage","isConnecting","connectToBackendAsync","handleAddBackend","e","newValue","newBackend","addBackend","newUrl","handleNewUrlChanged","state","backendUrlArray","removeBackend","onSubmit","htmlFor","placeholder","onChange","AppHeader","ConnectionStatus","disconnectBackend","ProfileViewer","getValidProfile","profileArray","filter","p","count","selectedProfile","onSelected","profile","description","onRefresh","MonitorViz","loadDataAsync","setInterval","getReportAsync","report","updateWindowDimensions","width","window","innerWidth","metricsNameComparer","name1","name2","getScore","fallBack","score","counterScore","startsWith","console","warn","interval","addEventListener","removeEventListener","clearInterval","chartWidth","chartHeight","Object","keys","metricName","idxKey","data","point","x","color","style","display","flexFlow","height","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","stroke","dataKey","strokeDasharray","vertical","strokeWidth","wrapperStyle","backgroundColor","isAnimationActive","fillOpacity","fill","React","MonitorPage","exitMonitor","traceSessionArray","profilingSession","find","defaultProps","App","BackendListKey","initializeAsync","Promise","all","loadProcessesAsync","LoadProfilesAsync","selectProfile","isReady","getProcessesAsync","processes","fetch","response","ok","json","results","method","headers","body","JSON","stringify","result","getTraceSessionsAsync","setSelectedSession","selectedSession","newState","isShowMonitor","setShowMonitoring","getTraceFilesAsync","files","traceFileArray","error","alert","getList","includes","push","localStorage","setItem","item","isBackendReady","trim","substring","getProfilesAsync","isMini","dumpType","bind","urlListSerialized","getItem","parse","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.41bcf1c7.chunk.js","sourcesContent":["export enum CounterScores {\r\n    // CPU\r\n    'CPU Usage',\r\n    'Number of Active Timers',\r\n    'Exception Count',\r\n    'ThreadPool Thread Count',\r\n    'ThreadPool Queue Length',\r\n    'ThreadPool Completed Work Item Count',\r\n\r\n    // Memory\r\n    'Working Set',\r\n    'Allocation Rate',\r\n    'Number of Assemblies Loaded',\r\n\r\n    'GC Heap Size',\r\n    '% Time in GC since last GC',\r\n    'Gen 0 Size',\r\n    'Gen 0 GC Count',\r\n    'Gen 1 Size',\r\n    'Gen 1 GC Count',\r\n    'LOH Size',\r\n    'Gen 2 Size',\r\n    'Gen 2 GC Count',\r\n\r\n    // Requests\r\n    'Current Requests',\r\n    'Failed Requests',\r\n    'Total Requests',\r\n    'Request Rate',\r\n    'Monitor Lock Contention Count',\r\n}","export enum ColorPalette {\r\n    '#005697',\r\n    '#456990',\r\n    '#3F5E5A',\r\n    '#C52184',\r\n    '#5FAD41',\r\n    '#54F2F2',\r\n}","import React, { Component, ReactNode } from 'react';\r\nimport Process from '../Models/Process';\r\nimport './Processes.css';\r\n\r\ninterface ProcessesProps {\r\n    refreshProcessAsync: () => Promise<void>;\r\n    startProfilingAsync: (processId: number) => Promise<boolean>;\r\n    startMonitoringAsync: (processId: number) => Promise<boolean>;\r\n    takeDumpAsync: (processId: number, isMini: boolean) => Promise<boolean>;\r\n    isDumping: boolean;\r\n    processArray: Process[] | undefined;\r\n}\r\n\r\nexport default class Processes extends Component<ProcessesProps, {}>{\r\n    render(): ReactNode {\r\n        let content;\r\n        let len = 0;\r\n\r\n        if (this.props.processArray === undefined || this.props.processArray.length === 0) {\r\n            content = (<div>\r\n                There is no .NET Core processes.\r\n            </div>);\r\n        } else {\r\n            len = this.props.processArray.length;\r\n            const dumpButtonClassName: string = 'button' + (this.props.isDumping ? ' disabled' : '');\r\n            content = this.props.processArray.map((process: Process, index: number) => {\r\n                return (<div className='process-line' key={index}>\r\n                    <span className='process-id'>{process.id}</span> <span className='process-name'>{process.name}</span> <span className='process-path'>{process.mainModule}</span>\r\n                    <input className='button' type='button' value='&#x25B6; Start Profiling'\r\n                        onClick={() => {\r\n                            this.props.startProfilingAsync(process.id)\r\n                        }} />\r\n\r\n                    <input className='button' type='button' value='&#x25B6; Start Monitoring'\r\n                        onClick={() => {\r\n                            this.props.startMonitoringAsync(process.id);\r\n                        }} />\r\n\r\n                    <input className={dumpButtonClassName} type='button' value='&#128248; Mini Dump' disabled={this.props.isDumping}\r\n                        onClick={async () => {\r\n                            await this.props.takeDumpAsync(process.id, true)\r\n                        }} />\r\n                    <input className={dumpButtonClassName} type='button' value='&#128248; Heap Dump' disabled={this.props.isDumping}\r\n                        onClick={async () => {\r\n                            await this.props.takeDumpAsync(process.id, false)\r\n                        }} />\r\n                </div>)\r\n            });\r\n        }\r\n\r\n        return (<div className='processes'>\r\n            <div className='header'>\r\n                <h2>Remote Process ({len})</h2>\r\n                <input className='button header-button refresh-button' type='button' onClick={this.handleRefresh} value='&#x1f5d8;'></input>\r\n            </div>\r\n            {this.props.isDumping ? <div>Dump in progress . . .</div> : null}\r\n            {content}\r\n        </div>\r\n        );\r\n    }\r\n\r\n    private handleRefresh = async (event: React.MouseEvent<HTMLInputElement, MouseEvent>) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.props.refreshProcessAsync();\r\n    }\r\n}\r\n\r\n\r\n","import React, { PureComponent } from 'react';\r\nimport { TraceSession } from '../Models/TraceSession';\r\nimport './TraceSessions.css';\r\n\r\ninterface TraceSessionsProps {\r\n    setAsSelected: (session: TraceSession) => void;\r\n    loadTraceSessionsAsync: () => Promise<void>;\r\n    stopProfilingAsync: (processId: number, sessionId: number) => Promise<boolean>;\r\n    stopMonitoringAsync: (processId: number, sessionId: number) => Promise<boolean>;\r\n    traceSessions: TraceSession[] | undefined;\r\n}\r\n\r\nexport default class TraceSessions extends PureComponent<TraceSessionsProps, {}>{\r\n    render() {\r\n        let list;\r\n        let len: number = 0;\r\n\r\n        if (this.props.traceSessions === undefined || this.props.traceSessions.length === 0) {\r\n            list = <div>There's no trace sessions.</div>\r\n        }\r\n        else {\r\n            len = this.props.traceSessions.length;\r\n            list = <div className='session-container'>\r\n                {this.props.traceSessions.map((session, index) => {\r\n                    return (<div className='session-line' key={index}>\r\n                        <div className='process-id-part'>\r\n                            <span className='bold-text'>ProcessId:&nbsp;</span>\r\n                            <span>{session.processId}</span>\r\n                        </div>\r\n                        <div className='session-id-part'>\r\n                            <span className='bold-text'>SessionId:&nbsp;</span>\r\n                            <span>{session.sessionId}</span>\r\n                        </div>\r\n                        {session.type === 0 && <input className='button' type='button' value='&#x25A0; Stop Profiling' onClick={() => {\r\n                            this.props.stopProfilingAsync(session.processId, session.sessionId);\r\n                        }} />}\r\n                        {session.type === 1 && <input className='button' type='button' value='&#x25A0; Stop Monitoring' onClick={() => {\r\n                            this.props.stopMonitoringAsync(session.processId, session.sessionId);\r\n                        }} />}\r\n                        {session.type === 1 && <input className='button' type='button' value='&#x1F5E0; Visualize' onClick={() => {\r\n                            this.props.setAsSelected(session);\r\n                        }} />}\r\n                    </div>);\r\n                })}\r\n            </div>\r\n        }\r\n        return (<div className='trace-session'>\r\n            <div className='header'>\r\n                <h2>Remote Trace Sessions ({len})</h2>\r\n                <input className='button header-button' type='button' defaultValue='&#x1f5d8;' onClick={this.props.loadTraceSessionsAsync} />\r\n            </div>\r\n            {list}\r\n        </div>);\r\n    }\r\n}","import React, { PureComponent } from 'react';\r\nimport TraceFile from '../Models/TraceFile';\r\nimport * as filesize from 'filesize';\r\nimport './TraceRepo.css';\r\n\r\ninterface TraceRepoProps {\r\n    baseUrl: string;\r\n    loadTraceFilesAsync: () => Promise<void>;\r\n    convertToSpeedscopeAsync: (fileName: string) => Promise<boolean>;\r\n    fileArray: TraceFile[] | undefined;\r\n}\r\n\r\nexport default class TraceRepo extends PureComponent<TraceRepoProps, {}>{\r\n    render() {\r\n        let content;\r\n        let len: number = 0;\r\n        if (this.props.fileArray === undefined || this.props.fileArray.length === 0) {\r\n            content = <div>There's no trace file.</div>\r\n        } else {\r\n            len = this.props.fileArray.length;\r\n            content = <div>\r\n                {this.props.fileArray.sort((a, b) => {\r\n                    return a.fileName > b.fileName ? -1 : 1;\r\n                }).map((file, index) => {\r\n                    const fileFormat = file.fileName.toLowerCase().endsWith('.nettrace') ? 'nettrace' : 'speedscope';\r\n                    const fileSize = filesize.default(file.sizeInBytes, { round: 0 });\r\n                    return <div key={index} className='trace-file-line'>\r\n                        <div className='trace-file'>\r\n                            <a href={`${this.props.baseUrl}/TraceFiles/${file.fileName}`}>{file.fileName}</a>\r\n                        </div>\r\n                        <div className='trace-file-size'>\r\n                            {fileSize}\r\n                        </div>\r\n                        {(fileFormat === 'nettrace') && <input className='button' type='button' value='Get speedscope file' onClick={() => this.props.convertToSpeedscopeAsync(file.fileName)}></input>}\r\n                        {/* <input className='button' type='button' value='Upload to SP Backend' onClick={() => alert(`Not implemented: ${file.fileName}`)} /> */}\r\n                    </div>\r\n                })}\r\n            </div>\r\n        }\r\n        return (<div className='trace-repo'>\r\n            <div className='header'>\r\n                <h2>Remote Trace Files ({len})</h2>\r\n                <input className='button header-button' type='button' value='&#x1f5d8;' onClick={async () => await this.props.loadTraceFilesAsync()}></input>\r\n            </div>\r\n            <div className='speed-scope-tips'>\r\n                To open trace in <a href='https://speedscope.app' target='_blank' rel='noopener noreferrer'>speedscope</a>, download the <span>speedscope.json</span> files to your local box and upload it to <a href='https://speedscope.app' target='_blank' rel='noopener noreferrer'>speedscope.app</a>.\r\n            </div>\r\n            {content}\r\n        </div>)\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './ConnectingToBackend.css';\r\n\r\ninterface ConnectingToBackendProps {\r\n    backendUrlArray: string[] | undefined,\r\n    connectToBackendAsync: (url: string) => Promise<boolean>;\r\n    addBackend: (newUrl: string) => void;\r\n    removeBackend: (targetUrl: string) => void;\r\n}\r\n\r\ninterface ConnectingToBackendState {\r\n    errorMessage: string | undefined;\r\n    isConnecting: boolean;\r\n    newUrl: string;\r\n}\r\n\r\nexport default class ConnectingToBackend extends Component<ConnectingToBackendProps, ConnectingToBackendState>{\r\n    constructor(props: ConnectingToBackendProps) {\r\n        super(props);\r\n        this.state = {\r\n            errorMessage: undefined,\r\n            isConnecting: false,\r\n            newUrl: '',\r\n        };\r\n    }\r\n\r\n    render() {\r\n        let content;\r\n        if (this.props.backendUrlArray === undefined || this.props.backendUrlArray.length === 0) {\r\n            content = <div>Please add backend.</div>\r\n        } else {\r\n            content = this.props.backendUrlArray.map((url, index) => {\r\n                return <div className='backend-item-container' key={index}>\r\n                    <span className='backend-url' onClick={async () => {\r\n                        await this.handleConnectAsync(url);\r\n                    }}>{url}</span>\r\n                    <input className='button' type='button' value='Connect' onClick={async () => {\r\n                        await this.handleConnectAsync(url);\r\n                    }}></input>\r\n                    <input className='button' type='button' value='Remove' onClick={async () => {\r\n                        this.props.removeBackend(url);\r\n                    }}></input>\r\n                </div>\r\n            })\r\n        }\r\n\r\n        return (\r\n            <div className='connect-backend'>\r\n                <h2>Pick a backend</h2>\r\n                {content}\r\n                {!!this.state.isConnecting && <div>Connecting . . .</div>}\r\n                {!!this.state.errorMessage && <div>{this.state.errorMessage}</div>}\r\n\r\n                <h2>Adding new Backend</h2>\r\n                <div className='new-endpoint-container'>\r\n                    <form onSubmit={this.handleAddBackend}>\r\n                        <label htmlFor='newBackend'>Type in a new endpoint:</label>\r\n                        <input className='text-input' id='newBackend' type='textbox' placeholder='http://localhost:9400'\r\n                            value={this.state.newUrl} onChange={this.handleNewUrlChanged} />\r\n                        <div>\r\n                            <span className='tips'>Tips: Press enter to add the endpoint.</span>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleConnectAsync = async (url: string) => {\r\n        this.setState({\r\n            errorMessage: '',\r\n            isConnecting: true,\r\n        });\r\n        const result = await this.props.connectToBackendAsync(url);\r\n        if (!result) {\r\n            this.setState({\r\n                errorMessage: `Failed to connecting to backend: ${url}.`,\r\n                isConnecting: false,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleAddBackend = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        const target = e.target as any;\r\n        const newValue = target.newBackend.value;\r\n        if (!!newValue) {\r\n            this.props.addBackend(newValue);\r\n            this.setState({\r\n                newUrl: ''\r\n            });\r\n        }\r\n    }\r\n\r\n    handleNewUrlChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            newUrl: e.target.value,\r\n        });\r\n    }\r\n}","import React from 'react';\r\nexport const AppHeader = () => (\r\n    <div className='app-header'>\r\n        <h1>.NET Core Profiling Console</h1>\r\n    </div>\r\n);","import React from 'react';\r\n\r\ninterface ConnectionStatusProps {\r\n    baseUrl: string;\r\n\r\n    disconnectBackend: () => void;\r\n}\r\n\r\nexport const ConnectionStatus = (props: ConnectionStatusProps) => (\r\n    <div className='connection-status'>\r\n        <h2>Connection</h2>\r\n        <span>&#x1f5a7; You are connecting to: {props.baseUrl}</span>\r\n        <input className='button' type='button' onClick={props.disconnectBackend} value='Disconnect'></input>\r\n    </div>\r\n);","import React, { PureComponent } from 'react';\r\nimport { Profile } from '../Models/Profile';\r\nimport './ProfilePicker.css';\r\n\r\ninterface ProfileViewerProps {\r\n    profileArray: Profile[] | undefined;\r\n    selectedProfile: string | undefined;\r\n    onSelected: (newValue: string) => void;\r\n    onRefresh: () => void;\r\n}\r\n\r\nexport default class ProfileViewer extends PureComponent<ProfileViewerProps, any> {\r\n    render() {\r\n        let count = 0;\r\n        let content;\r\n        const profileArray = this.getValidProfile();\r\n\r\n        if (profileArray !== undefined) {\r\n            count = profileArray.length;\r\n            content = (<div className='ProfileListContainer'><select value={this.props.selectedProfile} onChange={e => {\r\n                const target = e.target as any;\r\n                if (!!target && !!target.value) {\r\n                    this.props.onSelected(target.value);\r\n                }\r\n            }}>{\r\n                    profileArray.sort((a, b) => a > b ? 1 : -1).map((profile) => {\r\n                        return <option key={profile.name} value={profile.name}>{profile.name}: {profile.description}</option>;\r\n                    })\r\n                }</select></div>);\r\n        } else {\r\n            content = \"No tracing profile exist.\"\r\n        }\r\n        return <div className='profile-picker'>\r\n            <div className='header'>\r\n                <h2>Tracing Profiles ({count})</h2>\r\n                <input className='button header-button refresh-button' type='button' onClick={this.props.onRefresh} value='&#x1f5d8;'></input>\r\n            </div>\r\n            {content}\r\n        </div>\r\n    }\r\n\r\n    getValidProfile: () => Profile[] | undefined = () => {\r\n        if (this.props.profileArray === undefined) {\r\n            return undefined;\r\n        }\r\n        return this.props.profileArray.filter(p => p.name !== 'none');\r\n    }\r\n}","import React from 'react';\r\nimport { MonitorReport } from '../Models/MonitorReport';\r\nimport { AreaChart, YAxis, XAxis, CartesianGrid, Area, Tooltip } from 'recharts';\r\nimport './MonitorViz.css';\r\nimport { CounterScores } from '../Models/CounterScores';\r\nimport { ColorPalette } from '../Models/ColorPalette';\r\n\r\ninterface MonitorVizProps {\r\n    getReportAsync: () => Promise<MonitorReport | undefined>,\r\n}\r\n\r\ninterface MonitorVizState {\r\n    width: number;\r\n    report: MonitorReport | undefined;\r\n    interval: NodeJS.Timeout | null;\r\n}\r\n\r\nexport default class MonitorViz extends React.Component<MonitorVizProps, MonitorVizState> {\r\n    constructor(props: MonitorVizProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            report: undefined,\r\n            width: 0,\r\n            interval: null,\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const interval = await this.loadDataAsync();\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n        this.setState({\r\n            interval\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n        if (this.state.interval !== null) {\r\n            clearInterval(this.state.interval);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { report, width } = this.state;\r\n\r\n        let content;\r\n        if (report === undefined) {\r\n            content = <div className='data-loading-message'>Visualization data not available.</div>\r\n        } else {\r\n            let chartWidth = width < 600 ? width - 24 : width / 3 - 8;\r\n            if (chartWidth < 300) {\r\n                chartWidth = 300;\r\n            }\r\n            let chartHeight = chartWidth * 2 / 4;\r\n            if (chartHeight < 200) {\r\n                chartHeight = 200;\r\n            }\r\n            content = <>{\r\n                Object.keys(report).sort(this.metricsNameComparer).map((metricName, idxKey) => {\r\n                    const reportItem = (report as unknown as { [key: string]: number[] })[metricName];\r\n                    const data = reportItem.map((point, index) => {\r\n                        return { key: metricName, value: point, x: index };\r\n                    }) as ReadonlyArray<object>;\r\n\r\n                    const color = ColorPalette[idxKey % (Object.keys(ColorPalette).length / 2)];\r\n                    return <div key={idxKey} style={{ display: 'flex', flexFlow: 'column' }} >\r\n                        <h4 className='chart-title'>{metricName}</h4>\r\n                        <AreaChart\r\n                            width={chartWidth}\r\n                            height={chartHeight}\r\n                            data={data}\r\n                            margin={{ top: 5, right: 20, left: 10, bottom: 5 }}\r\n                        >\r\n                            <defs>\r\n                                <linearGradient id={color} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                    <stop offset=\"5%\" stopColor={color} stopOpacity={0.6} />\r\n                                    <stop offset=\"95%\" stopColor={color} stopOpacity={.2} />\r\n                                </linearGradient>\r\n                            </defs>\r\n                            <XAxis stroke='white' dataKey='x' type='number' />\r\n                            <YAxis stroke='white' type='number' />\r\n                            <CartesianGrid strokeDasharray=\"5 2\" vertical={false} strokeWidth='1' stroke='#888888' />\r\n                            <Tooltip wrapperStyle={{ color: 'blue', backgroundColor: 'red' }} isAnimationActive={false} />\r\n                            <Area type=\"monotone\" dataKey=\"value\" strokeWidth={2} stroke={color} fillOpacity={1} fill={\"url(#\" + color + \")\"}\r\n                                isAnimationActive={false}>\r\n                            </Area>\r\n                        </AreaChart>\r\n                    </div>\r\n                })\r\n            }\r\n            </>\r\n        }\r\n\r\n        return <div className='monitor-viz'>\r\n            {content}\r\n        </div>;\r\n    }\r\n\r\n    private loadDataAsync = async (): Promise<NodeJS.Timeout> => {\r\n        return setInterval(async () => {\r\n            const report = await this.props.getReportAsync();\r\n            this.setState({\r\n                report,\r\n            });\r\n        }, 500);\r\n    }\r\n\r\n    private updateWindowDimensions = () => {\r\n        this.setState({ width: window.innerWidth });\r\n    }\r\n\r\n    private metricsNameComparer: (name1: string, name2: string) => number = (name1, name2) => {\r\n        const fallback = 1000000;\r\n        const n1Score = this.getScore(name1, fallback);\r\n        const n2Score = this.getScore(name2, fallback);\r\n        return n1Score - n2Score;\r\n    }\r\n\r\n    private getScore: (name: string, fallBack: number) => number = (name, fallBack) => {\r\n        let score = fallBack;\r\n        if (name === null || name === undefined) {\r\n            return fallBack;\r\n        }\r\n        for (let counterScore in CounterScores) {\r\n            if (name.startsWith(counterScore)) {\r\n                score = +CounterScores[counterScore];\r\n                break;\r\n            }\r\n        }\r\n        if (score === fallBack) {\r\n            console.warn(name + ' is an unknown metrics.');\r\n        }\r\n        return score;\r\n    }\r\n}","import * as React from 'react';\r\nimport MonitorViz from './MonitorViz';\r\nimport { MonitorReport } from '../Models/MonitorReport';\r\nimport './MonitorPage.css';\r\nimport { TraceSession } from '../Models/TraceSession';\r\n\r\ninterface MonitorPageProps {\r\n    processId: number;\r\n    sessionId: number;\r\n    isDumping: boolean;\r\n    traceSessionArray: TraceSession[] | undefined;\r\n\r\n    exitMonitor: () => void;\r\n    getReportAsync: () => Promise<MonitorReport | undefined>;\r\n    takeDumpAsync: (processId: number, isMini: boolean) => Promise<any>;\r\n    startProfilingAsync: (processId: number) => Promise<boolean>;\r\n    stopProfilingAsync: (processId: number, sessionId: number) => Promise<boolean>;\r\n}\r\nconst MonitorPage: React.FC<MonitorPageProps> = ({ processId,\r\n    sessionId,\r\n    getReportAsync,\r\n    exitMonitor,\r\n    takeDumpAsync,\r\n    isDumping,\r\n    traceSessionArray,\r\n    startProfilingAsync,\r\n    stopProfilingAsync,\r\n}) => {\r\n    const dumpButtonClassName: string = 'button' + (isDumping ? ' disabled' : '');\r\n    const profilingSession = traceSessionArray === undefined ? undefined :\r\n        traceSessionArray.find(session => session.processId === processId && session.processId !== sessionId && session.type === 0);\r\n    return <div className='monitor-page'>\r\n        <div className='header'>\r\n            <h2>Monitoring</h2>\r\n            <h3>Session: {sessionId} Process: {processId}</h3>\r\n\r\n            <input type='button' value='Heap Dump' className={dumpButtonClassName} onClick={async () => await takeDumpAsync(processId, false)}\r\n                disabled={isDumping} />\r\n            <input type='button' value='Mini Dump' className={dumpButtonClassName} onClick={async () => await takeDumpAsync(processId, true)}\r\n                disabled={isDumping} />\r\n\r\n            {!!profilingSession &&\r\n                <input type='button' value='Stop Profiling' className={dumpButtonClassName} onClick={async () => {\r\n                    if (profilingSession !== undefined) {\r\n                        await stopProfilingAsync(profilingSession.processId, profilingSession.sessionId);\r\n                    }\r\n                }}\r\n                />}\r\n            {!profilingSession &&\r\n                <input type='button' value='Start Profiling' className={dumpButtonClassName} onClick={async () => {\r\n                    await startProfilingAsync(processId);\r\n                }}\r\n                />}\r\n            <input type='button' value='Back' className='button' onClick={exitMonitor} />\r\n        </div>\r\n        <div className='viz'>\r\n            <MonitorViz\r\n                getReportAsync={getReportAsync} />\r\n        </div>\r\n    </div>\r\n}\r\n\r\nMonitorPage.defaultProps = {\r\n    processId: 0,\r\n    sessionId: 0,\r\n}\r\n\r\nexport default MonitorPage;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport './Components/Processes'\r\nimport Process from './Models/Process';\r\nimport { TraceSession } from './Models/TraceSession';\r\n\r\nimport Processes from './Components/Processes';\r\nimport TraceSessions from './Components/TraceSessions';\r\nimport TraceFile from './Models/TraceFile';\r\nimport TraceRepo from './Components/TraceRepo';\r\nimport ConnectingToBackend from './Components/ConnectingToBackend';\r\nimport { AppHeader } from './Components/AppHeader';\r\nimport { ConnectionStatus } from './Components/ConnectionStatus';\r\nimport { Profile } from './Models/Profile';\r\nimport ProfilePicker from './Components/ProfilePicker';\r\nimport { MonitorReport } from './Models/MonitorReport';\r\nimport MonitorPage from './Components/MonitorPage';\r\n\r\ninterface AppState {\r\n  processArray: Process[] | undefined;\r\n  traceSessionArray: TraceSession[] | undefined;\r\n  traceFileArray: TraceFile[] | undefined;\r\n  isReady: boolean;\r\n  isBackendReady: boolean;\r\n  backendUrlArray: string[];\r\n  baseUrl: string;\r\n  profileArray: Profile[] | undefined;\r\n  selectedProfile: string | undefined;\r\n  isDumping: boolean;\r\n  selectedSession: undefined | TraceSession;\r\n  isShowMonitor: boolean;\r\n}\r\n\r\nexport default class App extends Component<any, AppState>{\r\n  readonly BackendListKey: string = 'backendList';\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    // Initial state\r\n    this.state = {\r\n      processArray: undefined,\r\n      traceSessionArray: undefined,\r\n      traceFileArray: undefined,\r\n      isReady: false,\r\n      isBackendReady: false,\r\n      backendUrlArray: this.getList(),\r\n      baseUrl: '',\r\n      profileArray: undefined,\r\n      selectedProfile: undefined,\r\n      isDumping: false,\r\n      selectedSession: undefined,\r\n      isShowMonitor: false,\r\n    };\r\n  }\r\n  render() {\r\n    let content;\r\n\r\n    if (!this.state.isBackendReady) {\r\n      content = <ConnectingToBackend\r\n        backendUrlArray={this.state.backendUrlArray}\r\n        addBackend={this.addBackend}\r\n        removeBackend={this.removeBackend}\r\n        connectToBackendAsync={this.connectToBackendAsync}\r\n      />;\r\n    } else {\r\n      const { isShowMonitor, selectedSession } = this.state;\r\n      content = this.state.isReady ? (\r\n        <>\r\n          {\r\n            isShowMonitor && selectedSession !== undefined &&\r\n            <MonitorPage\r\n              traceSessionArray={this.state.traceSessionArray}\r\n              isDumping={this.state.isDumping}\r\n              processId={selectedSession.processId}\r\n              sessionId={selectedSession.sessionId}\r\n              getReportAsync={this.getReportAsync}\r\n              exitMonitor={() => { this.setShowMonitoring(false); }}\r\n              takeDumpAsync={this.takeDumpAsync.bind(this)} \r\n              startProfilingAsync={this.startProfilingAsync}\r\n              stopProfilingAsync={this.stopProfilingAsync}\r\n              />\r\n          }\r\n          {(!isShowMonitor || selectedSession === undefined) &&\r\n            <div className='section'>\r\n              <ConnectionStatus baseUrl={this.state.baseUrl}\r\n                disconnectBackend={this.disconnectBackend}\r\n              />\r\n              <ProfilePicker\r\n                profileArray={this.state.profileArray}\r\n                onSelected={this.selectProfile}\r\n                selectedProfile={this.state.selectedProfile}\r\n                onRefresh={this.LoadProfilesAsync}\r\n              />\r\n              <Processes\r\n                refreshProcessAsync={this.loadProcessesAsync}\r\n                startProfilingAsync={this.startProfilingAsync}\r\n                startMonitoringAsync={this.startMonitoringAsync}\r\n                takeDumpAsync={this.takeDumpAsync}\r\n                processArray={this.state.processArray}\r\n                isDumping={this.state.isDumping}\r\n              />\r\n              <TraceSessions\r\n                traceSessions={this.state.traceSessionArray}\r\n                stopProfilingAsync={this.stopProfilingAsync}\r\n                stopMonitoringAsync={this.stopMonitoringAsync}\r\n                loadTraceSessionsAsync={this.loadTraceSessionsAsync}\r\n                setAsSelected={this.setSelectedSession} />\r\n              <TraceRepo\r\n                baseUrl={this.state.baseUrl}\r\n                loadTraceFilesAsync={this.loadTraceFilesAsync}\r\n                convertToSpeedscopeAsync={this.convertToSpeedscopeAsync}\r\n                fileArray={this.state.traceFileArray}\r\n              />\r\n            </div>\r\n          }\r\n        </>\r\n      ) : null;\r\n    }\r\n\r\n    return (\r\n      <div className='dark-theme'>\r\n        <AppHeader />\r\n        <div className='app-container'>\r\n          {content}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private initializeAsync: () => Promise<any> = async () => {\r\n    await Promise.all([\r\n      this.loadProcessesAsync(),\r\n      this.loadTraceSessionsAsync(),\r\n      this.loadTraceFilesAsync(),\r\n      this.LoadProfilesAsync(),\r\n    ]);\r\n\r\n    this.selectProfile('runtime-basic');\r\n\r\n    this.setState({\r\n      isReady: true,\r\n    });\r\n  }\r\n\r\n  // Processes\r\n  private loadProcessesAsync: () => Promise<void> = async () => {\r\n    try {\r\n      const processes = await this.getProcessesAsync();\r\n      this.setState({\r\n        processArray: processes,\r\n      });\r\n    } catch (ex) {\r\n      this.setState({\r\n        processArray: undefined,\r\n      });\r\n    }\r\n  }\r\n  private getProcessesAsync: () => Promise<Process[]> = async () => {\r\n    const response = await fetch(`${this.state.baseUrl}/processes`);\r\n    if (!!response && response.ok) {\r\n      const results: Process[] = await response.json();\r\n      return results;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  // Traces\r\n  private startProfilingAsync: (processId: number) => Promise<boolean> = async (processId: number) => {\r\n    const response = await fetch(`${this.state.baseUrl}/traces`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        processId: processId,\r\n        profile: this.state.selectedProfile,\r\n      }),\r\n    });\r\n\r\n    const result = !!response && response.ok;\r\n    if (result) {\r\n      await this.loadTraceSessionsAsync();\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private stopProfilingAsync: (processId: number, sessionId: number) => Promise<boolean> = async (processId: number, sessionId: number) => {\r\n    const response = await fetch(`${this.state.baseUrl}/traces/${processId}?sessionId=${sessionId}`, {\r\n      method: 'DELETE',\r\n    });\r\n\r\n    const result = !!response && response.ok;\r\n    if (result) {\r\n      await Promise.all([this.loadTraceSessionsAsync(), this.loadTraceFilesAsync()]);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Monitoring\r\n  private startMonitoringAsync: (processId: number) => Promise<boolean> = async (processId) => {\r\n    const response = await fetch(`${this.state.baseUrl}/monitors`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        processId\r\n      }),\r\n    });\r\n\r\n    const result = !!response && response.ok;\r\n    if (result) {\r\n      await this.loadTraceSessionsAsync();\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private stopMonitoringAsync: (processId: number, sessionId: number) => Promise<boolean> = async (processId, sessionId) => {\r\n    const response = await fetch(`${this.state.baseUrl}/monitors`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        processId,\r\n        id: sessionId,\r\n      }),\r\n    });\r\n\r\n    const result = !!response && response.ok;\r\n    if (result) {\r\n      await this.loadTraceSessionsAsync();\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // Sessions\r\n  private loadTraceSessionsAsync: () => Promise<void> = async () => {\r\n    try {\r\n      const traceSessions = await this.getTraceSessionsAsync();\r\n      this.setState({\r\n        traceSessionArray: traceSessions,\r\n      });\r\n    } catch{\r\n      this.setState({\r\n        traceSessionArray: undefined,\r\n      });\r\n    }\r\n  }\r\n\r\n  private getTraceSessionsAsync: () => Promise<TraceSession[]> = async () => {\r\n    const response = await fetch(`${this.state.baseUrl}/sessions`);\r\n    if (!!response && response.ok) {\r\n      const result: TraceSession[] = await response.json();\r\n      return result;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private setSelectedSession: (traceSession: TraceSession | undefined) => void = (selectedSession) => {\r\n    const newState: Partial<AppState> = {\r\n      selectedSession\r\n    };\r\n    if (selectedSession === undefined) {\r\n      newState.isShowMonitor = false;\r\n    } else if (!this.state.isShowMonitor) {\r\n      newState.isShowMonitor = true;\r\n    }\r\n    this.setState(newState as AppState);\r\n  }\r\n\r\n  private getReportAsync: () => Promise<MonitorReport | undefined> = async () => {\r\n    const { selectedSession } = this.state;\r\n    if (selectedSession === undefined) {\r\n      return undefined;\r\n    }\r\n    const response = await fetch(`${this.state.baseUrl}/Monitors/${selectedSession.processId}/${selectedSession.sessionId}`);\r\n    if (!!response && response.ok) {\r\n      const result: MonitorReport = await response.json();\r\n      return result;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  private setShowMonitoring: (value: boolean) => void = (value) => {\r\n    this.setState({\r\n      isShowMonitor: value,\r\n    });\r\n  }\r\n\r\n  // Repository\r\n  private loadTraceFilesAsync: () => Promise<void> = async () => {\r\n    try {\r\n      const files = await this.getTraceFilesAsync();\r\n      this.setState({\r\n        traceFileArray: files,\r\n      });\r\n    } catch{\r\n      this.setState({\r\n        traceFileArray: undefined,\r\n      });\r\n    }\r\n  }\r\n\r\n  private getTraceFilesAsync: () => Promise<TraceFile[]> = async () => {\r\n    const response = await fetch(`${this.state.baseUrl}/traceFiles`);\r\n    if (!!response && response.ok) {\r\n      const result: TraceFile[] = await response.json();\r\n      return result;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private convertToSpeedscopeAsync: (fileName: string) => Promise<boolean> = async (fileName) => {\r\n    const response = await fetch(`${this.state.baseUrl}/traceFiles`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        fileName,\r\n      }),\r\n    });\r\n    if (!!response && response.ok) {\r\n      await this.loadTraceFilesAsync();\r\n      return true;\r\n    } else {\r\n      const error = await response.json();\r\n\r\n      alert('Converting failed.' + !!error.error ? ' Details: ' + error.error : '');\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Backend\r\n  private addBackend: (url: string) => void = (url: string) => {\r\n    url = url.toLowerCase();\r\n    const list = this.getList();\r\n    if (!list.includes(url)) {\r\n      list.push(url);\r\n    }\r\n    localStorage.setItem(this.BackendListKey, JSON.stringify(list));\r\n    this.setState({\r\n      backendUrlArray: list\r\n    });\r\n  }\r\n\r\n  private removeBackend: (url: string) => void = (url: string): void => {\r\n    url = url.toLowerCase();\r\n    let list = this.getList();\r\n    list = list.filter(item => item !== url);\r\n    localStorage.setItem(this.BackendListKey, JSON.stringify(list));\r\n    this.setState({\r\n      backendUrlArray: list\r\n    });\r\n  }\r\n\r\n  private getList(): string[] {\r\n    const urlListSerialized: string | null = localStorage.getItem(this.BackendListKey);\r\n    let list: string[];\r\n    if (urlListSerialized === null || urlListSerialized === '' || urlListSerialized === '[]') {\r\n      list = ['http://localhost:9400'];\r\n    } else {\r\n      list = JSON.parse(urlListSerialized);\r\n    }\r\n    return list;\r\n  }\r\n\r\n  private disconnectBackend: () => void = () => {\r\n    this.setState({\r\n      baseUrl: '',\r\n      isReady: false,\r\n      isBackendReady: false,\r\n    });\r\n  }\r\n\r\n  private connectToBackendAsync: (url: string) => Promise<boolean> = async (url: string) => {\r\n    try {\r\n      url = url.trim();\r\n      if (!url.startsWith('http') && !url.startsWith('https')) {\r\n        return false;\r\n      }\r\n      if (url.endsWith('/')) {\r\n        url = url.substring(0, url.length - 1);\r\n      }\r\n      const response = await fetch(url + '/processes');\r\n      if (!!response && response.ok) {\r\n        this.setState({\r\n          isBackendReady: true,\r\n          baseUrl: url,\r\n        });\r\n        await this.initializeAsync();\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Profiles\r\n  private LoadProfilesAsync: () => void = async () => {\r\n    const result = await this.getProfilesAsync();\r\n    if (result.length > 0) {\r\n      this.setState({\r\n        profileArray: result,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        profileArray: undefined,\r\n      });\r\n    }\r\n  }\r\n\r\n  private getProfilesAsync: () => Promise<Profile[]> = async () => {\r\n    const response = await fetch(`${this.state.baseUrl}/profiles`);\r\n    if (!!response && response.ok) {\r\n      const result: Profile[] = await response.json();\r\n      return result;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private selectProfile: (newValue: string) => void = (newValue: string) => {\r\n    this.setState({\r\n      selectedProfile: newValue\r\n    });\r\n  }\r\n\r\n  // Dumps\r\n  private takeDumpAsync: (processId: number, isMini: boolean) => Promise<any> = async (processId, isMini) => {\r\n    this.setState({\r\n      isDumping: true,\r\n    });\r\n    const DUMP_TYPE_HEAP = 0;\r\n    const DUMP_TYPE_MINI = 1;\r\n    const dumpType = isMini ? DUMP_TYPE_MINI : DUMP_TYPE_HEAP;\r\n    const response = await fetch(`${this.state.baseUrl}/dumps`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        processId,\r\n        dumpType,\r\n      }),\r\n    });\r\n    if (!!response && response.ok) {\r\n      await this.loadTraceFilesAsync();\r\n      alert('Dump crated for process ' + processId);\r\n      this.setState({ isDumping: false })\r\n      return true;\r\n    } else {\r\n      alert('Failed to create the dump for this process: ' + processId);\r\n      this.setState({ isDumping: false })\r\n    }\r\n    return false;\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}